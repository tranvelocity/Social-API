openapi: 3.0.0
info:
  version: '1'
  title: Social API
  description: >
    The Social API is a comprehensive RESTful interface developed and

    maintained by the Tranvelocity team. It facilitates communication with the

    Social platform, allowing users to access and manage various

    social-related functionalities.


    Authentication and Authorization:


    The API employs a robust authentication and authorization mechanism to

    ensure secure access to resources. To interact with the API, users must

    include the following headers in their requests:


    - `X-Social-Api-Key`: A unique API key assigned to each user for

    authentication purposes.


    - `X-Social-Timestamp`: A Unix timestamp indicating the time of the

    request.


    - `X-Social-Signature`: A cryptographic signature generated using the

    `SHA-512` algorithm based on the API key, timestamp, and secret key. These

    headers are required for all requests.


    - `X-Social-User-SSID`: The User login session ID for user

    authentication. If provided, the API will specify the user's role based on

    this login session.


    - `X-Social-Auth-Id`: The authentication ID providing additional user

    identification.


    The Social API will specify the user's role based on this login session.
    If these `X-Social-User-SSID` and `X-Social-Auth-Id`

    headers are not included, it indicates that the request is sent by

    non-registered users.


    Role-Based Access Control:


    The Social API implements role-based access control (RBAC) to manage user

    permissions effectively. The following roles and corresponding access

    permissions are enforced:


    - **Posters**: Users with the role of "Posters" have full access rights to

    create, edit, publish, unpublish, and delete posts. They can also view both

    free and paid posts (also both published posts and unpublished posts).


    - **Paid Members**: Paid members have permissions to interact with the

    platform's premium features. They can view both free and paid posts, like
    and unlike

    posts, leave comments on posts. They can view only published posts.


    - **Free Members**: Free members have limited access to certain

    functionalities. They can view only paid posts and access post comments, but

    they cannot like or leave comments or interact with premium features. They
    can view only published posts.


    - **Non-registered users**: Similar with Free members.


    Signature Generation:


    To generate the required cryptographic signature, users can utilize the

    provided [Signature

    Generator](https://tools.hoctran.io/API-Signature-Generator/). This tool

    simplifies the process by automatically generating the signature based on

    the provided API key, and secret key.

  contact:
    name: Tranvelocity Team
    email: tranvanhoc.tb@gmail.com
    url: 'https://www.hoctran.io/'
  license:
    url: 'https://www.hoctran.io/'
    name: HocTran.
servers:
  - url: 'https://stage-social.api.com'
    description: Staging
  - url: 'https://api-social.user.com'
    description: Production
tags:
  - name: Poster-related endpoints (For Admin)
    description: >-
      Endpoints for managing posters, including retrieval, creation, update, and
      deletion of posters.
  - name: Post-related endpoints
    description: >-
      Endpoints for managing posts, including retrieval, creation, update, and
      deletion of posts.
  - name: Media-related endpoints
    description: >-
      Endpoints for managing media files, including uploading, retrieval,
      update, and deletion of media.
  - name: Comment-related endpoints
    description: >-
      Endpoints for managing comments on posts, including retrieval, creation,
      update, and deletion of comments.
  - name: Like-related endpoints
    description: >-
      Endpoints for managing likes on posts, including liking and unliking
      posts.
  - name: Cache-related endpoints
    description: >-
      Endpoints for clearing cached user roles to ensure role-based access
      control is up to date.
  - name: Session-related endpoints
    description: Endpoints for interacting with user session.
  - name: Throttle Configuration-related endpoints
    description: Endpoints for interacting with throttle configuration.
  - name: User Account Restriction-related endpoints
    description: Endpoints for interacting with user account restrictions
paths:
  /restricted-users:
    get:
      summary: Retrieve a list of restricted users
      description: >
        - This endpoint retrieves a paginated list of restricted users based on
        the provided search criteria.

        - It is intended for use in the admin panel only.

        - The `nickname` and `avatar` properties are sourced from the CRM API
        using the provided User ID.

        - The Social API does not manage these properties. To modify the
        nickname and avatar, users must update their profile on the member
        profile page.
      tags:
        - User Account Restriction-related endpoints
      operationId: get-restricted-users-list
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
        - name: user_id
          in: query
          required: false
          description: The User ID of the restricted user
          schema:
            type: integer
            example: 123456789
        - name: remarks
          in: query
          required: false
          description: Remarks or comments associated with the restricted user
          schema:
            type: string
            example: test
        - name: offset
          in: query
          required: false
          description: The number of items to skip before starting to return results
          schema:
            type: integer
            example: 0
        - name: limit
          in: query
          required: false
          description: The maximum number of restricted user items to return
          schema:
            type: integer
            example: 30
      responses:
        '200':
          description: A list of restricted users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Unique identifier for the restricted user
                          example: 01j93f55zj72wrzm6ma7h1mm19
                        admin_uuid:
                          type: string
                          description: The UUID of the admin who applied the restriction
                          example: c34w5c21-cb68-4c36-b327-aed397f1bw22
                        remarks:
                          type: string
                          description: Remarks or comments associated with the restriction
                          example: test
                        user_id:
                          type: integer
                          description: The User ID of the restricted user
                          example: 123456789
                        nickname:
                          type: string
                          description: Nickname of the restricted user (sourced from CRM)
                          example: HocTran (poster)
                        avatar:
                          type: string
                          description: Avatar URL of the restricted user (sourced from CRM)
                          example: >-
                            https://123456789.cloudfront.net/crm/staging/member/avatar/3317c26b-c484-4c62-b558-651f6fd51579-1722936935.png
                        updated_at:
                          type: string
                          description: >-
                            The timestamp of when the restriction was last
                            updated
                          example: '2024-10-01 16:19:16'
                        created_at:
                          type: string
                          description: The timestamp of when the restriction was created
                          example: '2024-10-01 16:19:16'
                  success:
                    type: boolean
                    description: Indicates whether the request was successful
                    example: true
                  code:
                    type: integer
                    description: The HTTP status code of the response
                    example: 200
                  pagination:
                    type: object
                    properties:
                      offset:
                        type: integer
                        example: 0
                      limit:
                        type: integer
                        example: 30
                      total:
                        type: integer
                        description: The total number of restricted users available
                        example: 2
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
    post:
      summary: Create a new restricted user
      description: >
        - This endpoint allows the creation of a new restricted user.

        - It is intended for use in the admin panel only.

        - The `nickname` and `avatar` properties are sourced from the CRM API
        using the provided User ID.

        - The Social API does not manage these properties. To modify the
        nickname and avatar, users must update their profile on the member
        profile page.
      tags:
        - User Account Restriction-related endpoints
      operationId: create-restricted-user
      requestBody:
        description: The parameters required to create a new restricted user
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: The User ID of the restricted user (required)
                  example: 123456789
                remarks:
                  type: string
                  description: Optional remarks or comments associated with the restriction
                  example: test
              required:
                - user_id
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
      responses:
        '201':
          description: The restricted user was successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Unique identifier for the restricted user
                        example: 01j93ftnyjs3c0z7pa6afvhs01
                      admin_uuid:
                        type: string
                        description: The UUID of the admin who created the restriction
                        example: c34w5c21-cb68-4c36-b327-aed397f1bw22
                      remarks:
                        type: string
                        description: Remarks or comments associated with the restriction
                        example: test
                      user_id:
                        type: integer
                        description: The User ID of the restricted user
                        example: 123456789
                      nickname:
                        type: string
                        description: Nickname of the restricted user (sourced from CRM)
                        example: HocTran (poster)
                      avatar:
                        type: string
                        description: Avatar URL of the restricted user (sourced from CRM)
                        example: >-
                          https://123456789.cloudfront.net/crm/staging/member/avatar/3317c26b-c484-4c62-b558-651f6fd51579-1722936935.png
                      updated_at:
                        type: string
                        description: The timestamp of when the restriction was last updated
                        example: '2024-10-01 16:31:01'
                      created_at:
                        type: string
                        description: The timestamp of when the restriction was created
                        example: '2024-10-01 16:31:01'
                  success:
                    type: boolean
                    description: Indicates whether the request was successful
                    example: true
                  code:
                    type: integer
                    description: The HTTP status code of the response
                    example: 201
        '400':
          description: Validation error when creating the restricted user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates that the request was unsuccessful
                    example: false
                  code:
                    type: integer
                    description: The HTTP status code of the response
                    example: 400
                  errors:
                    type: object
                    properties:
                      message:
                        type: string
                        description: Detailed error message
                        example: required|The user id field is required.
                      validation:
                        type: array
                        items:
                          type: object
                          properties:
                            attribute:
                              type: string
                              description: The field that caused the validation error
                              example: user_id
                            errors:
                              type: array
                              items:
                                type: object
                                properties:
                                  key:
                                    type: string
                                    description: The type of validation error
                                    example: Required
                                  message:
                                    type: string
                                    description: Detailed error message
                                    example: >-
                                      required|The user id field is
                                      required.
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '409':
          description: Conflict error when the user is already restricted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates that the request was unsuccessful
                    example: false
                  code:
                    type: integer
                    description: The HTTP status code of the response
                    example: 409
                  errors:
                    type: object
                    properties:
                      message:
                        type: string
                        description: Conflict error message
                        example: このユーザーは既に制限されています。
                      code:
                        type: integer
                        description: Error code for conflict issues
                        example: 409001
  '/restricted-users/{id}':
    get:
      summary: Retrieve a specific restricted user by ID
      description: >
        - This endpoint retrieves the details of a specific restricted user by
        their ID.

        - It is intended for use in the admin panel only.

        - The `nickname` and `avatar` properties are sourced from
        the CRM API using the provided User ID.

        - The Social API does not manage these properties. To modify the nickname and avatar, users must
        update their profile on the member profile page.
      tags:
        - User Account Restriction-related endpoints
      operationId: get-restricted-user
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the restricted user to retrieve.
          schema:
            type: string
            example: 01j93ftnyjs3c0z7pa6afvhs01
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
        - name: role
          in: query
          required: true
          description: The role of the user (only "poster" role is allowed)
          schema:
            type: string
            example: poster
      responses:
        '200':
          description: The restricted user resource was successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Unique identifier for the restricted user
                        example: 01j93ftnyjs3c0z7pa6afvhs01
                      admin_uuid:
                        type: string
                        description: The UUID of the admin who created the restriction
                        example: c34w5c21-cb68-4c36-b327-aed397f1bw22
                      remarks:
                        type: string
                        description: Remarks or comments associated with the restriction
                        example: test
                      user_id:
                        type: integer
                        description: The User ID of the restricted user
                        example: 123456789
                      nickname:
                        type: string
                        description: Nickname of the restricted user (sourced from CRM)
                        example: HocTran (poster)
                      avatar:
                        type: string
                        description: Avatar URL of the restricted user (sourced from CRM)
                        example: >-
                          https://123456789.cloudfront.net/crm/staging/member/avatar/3317c26b-c484-4c62-b558-651f6fd51579-1722936935.png
                      updated_at:
                        type: string
                        description: The timestamp of when the restriction was last updated
                        example: '2024-10-01 16:31:01'
                      created_at:
                        type: string
                        description: The timestamp of when the restriction was created
                        example: '2024-10-01 16:31:01'
                  success:
                    type: boolean
                    description: Indicates whether the request was successful
                    example: true
                  code:
                    type: integer
                    description: The HTTP status code of the response
                    example: 200
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '404':
          description: The specified restricted user was not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates that the request was unsuccessful
                    example: false
                  code:
                    type: integer
                    description: The HTTP status code of the response
                    example: 404
                  errors:
                    type: object
                    properties:
                      message:
                        type: string
                        description: Error message indicating the user was not found
                        example: ID 01j93ftnyjs3c0z7pa6afvhs011 に該当する制限ユーザーが見つかりませんでした。
                      code:
                        type: integer
                        description: Error code indicating the resource was not found
                        example: 404001
    put:
      summary: Update a specific restricted user by ID
      description: >
        - This endpoint updates the details of a specific restricted user by
        their ID.

        - It is intended for use in the admin panel only.

        - The `nickname` and `avatar` properties are sourced from the CRM API
        using the provided User ID.

        - The Social API does not manage these properties. To modify the
        nickname and avatar, users must update their profile on the member
        profile page.
      tags:
        - User Account Restriction-related endpoints
      operationId: update-restricted-user
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the restricted user to update.
          schema:
            type: string
            example: 01j93ftnyjs3c0z7pa6afvhs01
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
      requestBody:
        description: >-
          The request body containing the parameters to update a restricted
          user.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                remarks:
                  type: string
                  description: Remarks or comments associated with the restriction.
                  example: This is a sample
      responses:
        '200':
          description: The restricted user resource was successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Unique identifier for the restricted user
                        example: 01j93ftnyjs3c0z7pa6afvhs01
                      admin_uuid:
                        type: string
                        description: The UUID of the admin who updated the restriction
                        example: c34w5c21-cb68-4c36-b327-aed397f1bw22
                      remarks:
                        type: string
                        description: Remarks or comments associated with the restriction
                        example: This is a sample
                      user_id:
                        type: integer
                        description: The User ID of the restricted user
                        example: 123456789
                      nickname:
                        type: string
                        description: Nickname of the restricted user (sourced from CRM)
                        example: HocTran (poster)
                      avatar:
                        type: string
                        description: Avatar URL of the restricted user (sourced from CRM)
                        example: >-
                          https://123456789.cloudfront.net/crm/staging/member/avatar/3317c26b-c484-4c62-b558-651f6fd51579-1722936935.png
                      updated_at:
                        type: string
                        description: The timestamp of when the restriction was last updated
                        example: '2024-10-01 17:06:08'
                      created_at:
                        type: string
                        description: The timestamp of when the restriction was created
                        example: '2024-10-01 16:31:01'
                  success:
                    type: boolean
                    description: Indicates whether the request was successful
                    example: true
                  code:
                    type: integer
                    description: The HTTP status code of the response
                    example: 200
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '404':
          description: The specified restricted user was not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates that the request was unsuccessful
                    example: false
                  code:
                    type: integer
                    description: The HTTP status code of the response
                    example: 404
                  errors:
                    type: object
                    properties:
                      message:
                        type: string
                        description: Error message indicating the user was not found
                        example: ID 01j93h6tgqgb64v7sj8wp3hwt4 に該当する制限ユーザーが見つかりませんでした。
                      code:
                        type: integer
                        description: Error code indicating the resource was not found
                        example: 404001
    delete:
      summary: Delete a specific restricted user by ID
      description: >
        - This endpoint deletes a specific restricted user by their ID.

        - It is intended for use in the admin panel only.
      tags:
        - User Account Restriction-related endpoints
      operationId: delete-restricted-user
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the restricted user to delete.
          schema:
            type: string
            example: 01j93ftnyjs3c0z7pa6afvhs01
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
      responses:
        '204':
          description: The restricted user has been deleted successfully (no content).
          content:
            application/json:
              schema:
                type: string
              examples:
                no_content:
                  value: ''
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '404':
          description: The specified restricted user was not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates that the request was unsuccessful.
                    example: false
                  code:
                    type: integer
                    description: The HTTP status code of the response.
                    example: 404
                  errors:
                    type: object
                    properties:
                      message:
                        type: string
                        description: Error message indicating the user was not found.
                        example: ID 01j93dad5ptjtbg0p1gd7v8n60 に該当する制限ユーザーが見つかりませんでした。
                      code:
                        type: integer
                        description: Error code indicating the resource was not found.
                        example: 404001
  /throttle-config:
    get:
      summary: Retrieve a list of throttle configurations
      description: >
        - This endpoint retrieves a list of throttle configuration resources.

        - It ensures that the authenticated admin has the necessary permissions
        to access the configurations.

        - It is intended for use in the admin panel only.

        - For this endpoint, the UPDATE action is not supported. To modify a value, remove the existing configuration and set a new one.
      tags:
        - Throttle Configuration-related endpoints
      operationId: get-throttle-config
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
      responses:
        '200':
          description: A throttle configuration resource retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        description: The unique identifier for the throttle configuration.
                        example: 01j92yjeb7varg36qqad4c703v
                      admin_uuid:
                        type: string
                        description: >-
                          The UUID of the admin associated with the throttle
                          configuration.
                        example: c34w5c21-cb68-4c36-b327-aed397f1bw22
                      time_frame_minutes:
                        type: integer
                        description: Time frame in hours for the throttle configuration.
                        example: 1
                      max_comments:
                        type: integer
                        description: Maximum number of comments allowed in the time frame.
                        example: 2
                      updated_at:
                        type: string
                        format: date-time
                        description: >-
                          The date and time when the throttle configuration was
                          last updated.
                        example: '2024-10-01 11:29:25'
                      created_at:
                        type: string
                        format: date-time
                        description: >-
                          The date and time when the throttle configuration was
                          created.
                        example: '2024-10-01 11:29:25'
                  success:
                    type: boolean
                    description: Indicates whether the request was successful
                    example: true
                  code:
                    type: integer
                    description: The HTTP status code of the response
                    example: 200
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '404':
          description: Throttle configuration not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  code:
                    type: integer
                    example: 404
                  errors:
                    type: object
                    properties:
                      message:
                        type: string
                        example: スロットル設定が見つかりませんでした。
                      code:
                        type: integer
                        example: 404001
    post:
      summary: Create a new throttle configuration
      description: >
        - This endpoint allows the creation of a new throttle configuration.

        - It is intended for use in the admin panel only.

        - The throttle configuration defines limits on the number of comments a
        user can post within a specified time frame.

        - For this endpoint, the UPDATE action is not supported. To modify a value, remove the existing configuration and set a new one.
      tags:
        - Throttle Configuration-related endpoints
      operationId: create-throttle-config
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                time_frame_minutes:
                  type: integer
                  description: The number of hours for the throttle time frame.
                  example: 1
                max_comments:
                  type: integer
                  description: >-
                    The maximum number of comments allowed within the throttle
                    time frame.
                  example: 2
              required:
                - time_frame_minutes
                - max_comments
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
      responses:
        '201':
          description: The throttle configuration was created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        description: The unique identifier of the throttle configuration.
                        example: 01j93ddwxjr71hnhheqs8jjdew
                      admin_uuid:
                        type: string
                        description: >-
                          The UUID of the admin who created the throttle
                          configuration.
                        example: c34w5c21-cb68-4c36-b327-aed397f1bw22
                      time_frame_minutes:
                        type: integer
                        description: The time frame for the throttle in hours.
                        example: 1
                      max_comments:
                        type: integer
                        description: >-
                          The maximum number of comments allowed within the time
                          frame.
                        example: 2
                      created_at:
                        type: string
                        format: date-time
                        description: The time when the throttle configuration was created.
                        example: '2024-10-01 15:49:05'
                      updated_at:
                        type: string
                        format: date-time
                        description: >-
                          The time when the throttle configuration was last
                          updated.
                        example: '2024-10-01 15:49:05'
                  success:
                    type: boolean
                    description: Indicates whether the request was successful.
                    example: true
                  code:
                    type: integer
                    description: The HTTP status code of the response.
                    example: 201
        '400':
          description: Validation error occurred while creating the throttle configuration.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: Empty array when validation fails.
                    example: []
                  success:
                    type: boolean
                    description: Indicates that the request was unsuccessful.
                    example: false
                  code:
                    type: integer
                    description: The HTTP status code of the response.
                    example: 400
                  errors:
                    type: object
                    properties:
                      message:
                        type: string
                        description: Error message.
                        example: >-
                          required|The time frame hours field is required. (and
                          1 more error)
                      validation:
                        type: array
                        description: Details of the validation errors.
                        items:
                          type: object
                          properties:
                            attribute:
                              type: string
                              description: The attribute that failed validation.
                              example: time_frame_minutes
                            errors:
                              type: array
                              items:
                                type: object
                                properties:
                                  key:
                                    type: string
                                    description: The validation rule that failed.
                                    example: Required
                                  message:
                                    type: string
                                    description: The validation error message.
                                    example: >-
                                      required|The time frame hours field is
                                      required.
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '409':
          description: A throttle configuration already exists for this merchant.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates that the request was unsuccessful.
                    example: false
                  code:
                    type: integer
                    description: The HTTP status code of the response.
                    example: 409
                  errors:
                    type: object
                    properties:
                      message:
                        type: string
                        description: >-
                          Error message indicating that a configuration already
                          exists.
                        example: このマーチャントには既にスロットル設定が存在しています。
                      code:
                        type: integer
                        description: The error code indicating a conflict.
                        example: 409001
  '/throttle-config/{id}':
    delete:
      summary: Delete a throttle configuration
      description: >
        - This endpoint allows the deletion of a specific throttle configuration
        by ID.

        - It is intended for use in the admin panel only.
      tags:
        - Throttle Configuration-related endpoints
      operationId: delete-throttle-config
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
        - name: id
          in: path
          required: true
          description: The unique identifier of the throttle configuration to delete.
          schema:
            type: string
            example: 01j93ddwxjr71hnhheqs8jjdew
      responses:
        '204':
          description: Throttle configuration deleted successfully (no content).
          content:
            application/json:
              schema:
                type: string
              examples:
                no_content:
                  value: ''
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '404':
          description: The specified throttle configuration could not be found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates that the request was unsuccessful.
                    example: false
                  code:
                    type: integer
                    description: The HTTP status code of the response.
                    example: 404
                  errors:
                    type: object
                    properties:
                      message:
                        type: string
                        description: >-
                          Error message indicating that the throttle
                          configuration was not found.
                        example: スロットル設定が見つかりませんでした。
                      code:
                        type: integer
                        description: >-
                          Error code indicating that the throttle configuration
                          was not found.
                        example: 404001
  /posters:
    get:
      summary: Retrieve a list of posters
      description: >
        - This endpoint retrieves a paginated list of posters based on the
        provided search criteria.

        - It is intended for use in the admin panel only.

        - Note:
          - The nickname and avatar properties are sourced from the
        CRM API using the User ID. The Social API does not manage these
        properties. If users wish to change their nickname or avatar, they need
        to update their profile on the member profile page.
      tags:
        - Poster-related endpoints (For Admin)
      operationId: get-posters-list-resource
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - name: user_id
          in: query
          required: false
          description: The user ID
          schema:
            type: integer
            example: 123456789
      responses:
        '200':
          description: A list of posters retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Poster'
                  success:
                    type: boolean
                    description: Indicates whether the request was successful
                  code:
                    type: integer
                    description: The HTTP status code of the response
                    example: 200
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
    post:
      summary: Store a newly created poster
      description: >
        - This endpoint facilitates the storage of a newly created poster within
        the system.

        - It is intended for use in the admin panel only.

        - Note:
          - The properties for nickname and avatar are sourced from the CRM API using the provided User ID.
          - The Social API does not manage these properties. To modify the nickname and avatar, users must update their user profile via the member profile page.
      tags:
        - Poster-related endpoints (For Admin)
      operationId: store-new-poster
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
      requestBody:
        $ref: '#/components/requestBodies/CreatePosterRequest'
      responses:
        '201':
          description: A list of posters retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: The unique identifier of the poster.
                        admin_uuid:
                          type: string
                          format: uuid
                          description: The UUID of the admin who created the poster.
                        user_id:
                          type: integer
                          description: The user ID associated with the poster.
                        nickname:
                          type: string
                          description: The nickname of the poster (retrieved from CRM API)
                          example: HocTran（本人）
                        avatar:
                          type: string
                          description: >-
                            The avatar URL of the poster (retrieved from CRM
                            API)
                          example: >-
                            https://123456789.cloudfront.net/crm/staging/avatar.png
                        description:
                          type: string
                          description: A description of the poster.
                        updated_at:
                          type: string
                          format: date-time
                          description: The date and time when the poster was last updated.
                        created_at:
                          type: string
                          format: date-time
                          description: The date and time when the poster was created.
                  success:
                    type: boolean
                    description: Indicates whether the request was successful
                  code:
                    type: integer
                    description: The HTTP status code of the response
                    example: 201
                example:
                  data:
                    - id: 01hpr9vxjhsygaecwkp30paayw
                      admin_uuid: 1295de24-404b-402f-8ec5-1a5f3231a244
                      user_id: 123456789
                      nickname: HocTran（本人）
                      avatar: >-
                        https://123456789.cloudfront.net/crm/staging/avatar.png
                      description: This is description.
                      updated_at: '2024-02-16T15:32:38'
                      created_at: '2024-02-16T15:32:38'
                  success: true
                  code: 201
        '400':
          description: The request parameters are incorrect.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: An empty array since no data is returned.
                  success:
                    type: boolean
                    description: >-
                      Indicates whether the request was successful. In this
                      case, false.
                  code:
                    type: integer
                    description: 'The HTTP status code of the response. In this case, 400.'
                    example: 400
                  errors:
                    type: object
                    description: Object containing error details.
                    properties:
                      message:
                        type: string
                        description: A general error message.
                        example: >-
                          The request parameters are incorrect, please make sure
                          to follow the documentation about request parameters
                          of the resource.
                      validation:
                        type: array
                        description: Array containing validation errors.
                        items:
                          type: object
                          properties:
                            attribute:
                              type: string
                              description: The attribute related to the validation error.
                            errors:
                              type: array
                              description: >-
                                Array containing specific error messages for the
                                attribute.
                              items:
                                type: object
                                properties:
                                  key:
                                    type: string
                                    description: The key identifying the error type.
                                  message:
                                    type: string
                                    description: A descriptive error message.
                example:
                  data: []
                  success: false
                  code: 400
                  errors:
                    message: >-
                      The request parameters are incorrect, please make sure to
                      follow the documentation about request parameters of the
                      resource.
                    validation:
                      - attribute: user_id
                        errors:
                          - key: Required
                            message: required|The user id field is required.
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '409':
          description: Conflict - The resource already exists.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: >-
                      Indicates whether the request was successful. In this
                      case, false.
                  code:
                    type: integer
                    description: 'The HTTP status code of the response. In this case, 409.'
                    example: 409
                  errors:
                    type: object
                    description: Object containing error details.
                    properties:
                      message:
                        type: string
                        description: >-
                          A specific error message indicating that the resource
                          already exists.
                        example: この投稿者は既に存在します。
                      code:
                        type: integer
                        description: An error code associated with the conflict.
                        example: 409001
                example:
                  success: false
                  code: 409
                  errors:
                    message: この投稿者は既に存在します。
                    code: 409001
  '/posters/{id}':
    get:
      summary: Retrieve the specified poster resource by ID
      description: >
        - This endpoint retrieves the details of a specific poster resource
        identified by its unique ID.

        - It is intended for use in the admin panel only.

        - Note:
          - The properties for nickname and avatar are sourced from the CRM API using the provided User ID.
          - The Social API does not manage these properties. To modify the nickname and avatar, users must update their user profile via the member profile page.
      tags:
        - Poster-related endpoints (For Admin)
      operationId: get-poster-by-id
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - name: id
          in: path
          required: true
          description: The ID of the poster to retrieve.
          schema:
            type: string
            example: 01hpr9vxjhsygaecwkp30paayw
      responses:
        '200':
          description: Successful response with the poster resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Poster'
                  success:
                    type: boolean
                    description: Indicates whether the request was successful
                    example: true
                  code:
                    type: integer
                    description: The HTTP status code of the response
                    example: 200
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '404':
          description: Poster not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates whether the request was successful
                    example: false
                  code:
                    type: integer
                    description: The HTTP status code of the response
                    example: 404
                  errors:
                    type: object
                    properties:
                      message:
                        type: string
                        description: Error message indicating the poster was not found
                        example: ID 01hpr9vxjhsygaecwkp30paayw1 に一致する投稿者は見つかりませんでした。
                      code:
                        type: integer
                        description: Error code indicating the specific error
                        example: 404001
    put:
      summary: Update the specified poster
      description: >
        - This endpoint updates the details of a specific poster identified by
        its unique ID.

        - It is intended for use in the admin panel only.

        - Note:
          - The properties for nickname and avatar are sourced from the CRM API using the provided User ID.
          - The Social API does not manage these properties. To modify the nickname and avatar, users must update their user profile via the member profile page.
      tags:
        - Poster-related endpoints (For Admin)
      operationId: update-poster-by-id
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - name: id
          in: path
          required: true
          description: The ID of the poster to update.
          schema:
            type: string
            example: 01hpr9vxjhsygaecwkp30paayw
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: The updated user ID associated with the poster.
                  example: 123456789
                description:
                  type: string
                  description: The updated description of the poster.
                  example: This is an updated description.
      responses:
        '200':
          description: Successful response with the updated poster resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Poster'
                  success:
                    type: boolean
                    description: Indicates whether the request was successful
                    example: true
                  code:
                    type: integer
                    description: The HTTP status code of the response
                    example: 200
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '403':
          $ref: '#/components/responses/403ForbiddenResponse'
        '404':
          description: Poster not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates whether the request was successful
                    example: false
                  code:
                    type: integer
                    description: The HTTP status code of the response
                    example: 404
                  errors:
                    type: object
                    properties:
                      message:
                        type: string
                        description: Error message indicating the poster was not found
                        example: ID 01hpr8f48h94ntnmvcftszb2s7 に一致する投稿者は見つかりませんでした。
                      code:
                        type: integer
                        description: Error code indicating the specific error
                        example: 404001
    delete:
      summary: Remove the specified poster
      description: >
        - This endpoint removes a specific poster identified by its unique ID
        from storage.

        - It is intended for use in the admin panel only.
      tags:
        - Poster-related endpoints (For Admin)
      operationId: remove-poster-by-id
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - name: id
          in: path
          required: true
          description: The ID of the poster to delete.
          schema:
            type: string
            example: 01hpr9vxjhsygaecwkp30paayw
      responses:
        '204':
          description: The post was successfully deleted
          content:
            application/json:
              schema:
                type: string
              examples:
                no_content:
                  value: ''
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '404':
          $ref: '#/components/responses/404PosterNotFoundResponse'
  /session:
    get:
      tags:
        - Session-related endpoints
      summary: Retrieve membership data
      description: >
        This endpoint retrieves membership data based on the provided
        authentication and session information. The roles correspond to
        different types of users:


        - `Role ID: 0` (Non-registered user - 未登録ユーザー): Represents users who
        have not registered or logged into the system. They have limited access
        and privileges. Non-registered users can only view published posts, with
        content associated with paid posts returned as null. They can view all
        comments on each post but cannot leave a comment themselves, nor can
        they like a post.


        - `Role ID: 2` (Poster - 投稿者): Represents users who have the privilege
        to post content on the platform. Posters typically have full permissions
        to access all features and content on the platform.


        - `Role ID: 3` (Premium member - 有料会員): Represents users who have paid
        for premium membership. Premium members can only view published posts
        but have permission to leave comments or like any published posts.


        - `Role ID: 4` (Free member - 無料会員): Represents users who have
        registered for free membership. Free members have access similar to
        non-registered users.
      operationId: get-session
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - name: X-Social-User-SSID
          in: header
          description: |
            The session ID for User.
          required: false
          schema:
            type: string
            example: MBhdHsd4ckmKNNDaScHCJjuPY5pgGFQOhMSSqPis
        - name: X-Social-Auth-Id
          in: header
          description: |
            The ID used for authentication.
          required: false
          schema:
            type: string
            example: ebbae0f297e50fa92f2eaaa340a1f9125cad6e2d
      responses:
        '200':
          description: Successful response containing membership data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      role:
                        type: integer
                        description: The role of the user.

                      user_id:
                        type: integer
                        description: The ID of the user.
                      email:
                        type: string
                        description: The email address of the user.
                      last_name:
                        type: string
                        description: The last name of the user.
                      first_name:
                        type: string
                        description: The first name of the user.
                      last_name_kana:
                        type: string
                        description: >-
                          The last name in Kana (Japanese syllabary) of the
                          user.
                      first_name_kana:
                        type: string
                        description: >-
                          The first name in Kana (Japanese syllabary) of the
                          user.
                      nickname:
                        type: string
                        description: The nickname of the user.
                      avatar:
                        type: string
                        format: uri
                        description: The URL of the user's avatar.
                      member_no:
                        type: integer
                        description: The member number of the user.
                      member_status:
                        type: integer
                        description: The status of the user's membership.
              examples:
                example-1:
                  summary: Response for Posters
                  value:
                    data:
                      role: 2
                      user_id: 123456789
                      email: tranvanhoc.tb@gmail.com
                      last_name: チャン
                      first_name: ガク
                      last_name_kana: チャン
                      first_name_kana: ガク
                      nickname: HocTran
                      avatar: >-
                        https://123456789.cloudfront.net/crm/staging/https://stage.user.com/file/fileconsumer/doo/selector/downloader/phase/download_file/type/images/file_id/phpv2w4cF
                      member_no: 276
                      member_status: 300
                    success: true
                    code: 200
                    pagination: null
                example-2:
                  summary: Response for Paid Members
                  value:
                    data:
                      role: 3
                      user_id: 14410
                      email: tranvanhoc.tb@gmail.com
                      last_name: チャン
                      first_name: ガク
                      last_name_kana: チャン
                      first_name_kana: ガク
                      nickname: HocTran
                      avatar: >-
                        https://123456789.cloudfront.net/crm/staging/https://stage.user.com/file/fileconsumer/doo/selector/downloader/phase/download_file/type/images/file_id/phpv2w4cF
                      member_no: 276
                      member_status: 300
                    success: true
                    code: 200
                    pagination: null
                example-3:
                  summary: Response for Free Members
                  value:
                    data:
                      role: 4
                      user_id: 14410
                      email: tranvanhoc.tb@gmail.com
                      last_name: チャン
                      first_name: ガク
                      last_name_kana: チャン
                      first_name_kana: ガク
                      nickname: HocTran
                      avatar: >-
                        https://123456789.cloudfront.net/crm/staging/https://stage.user.com/file/fileconsumer/doo/selector/downloader/phase/download_file/type/images/file_id/phpv2w4cF
                      member_no: 276
                      member_status: 200
                    success: true
                    code: 200
                    pagination: null
                example-4:
                  summary: Response for Non-registered users
                  value:
                    data:
                      role: 0
                    success: true
                    code: 200
                    pagination: null
  /session/is-poster:
    post:
      summary: Check whether a user is a poster.
      description: >
        This endpoint checks whether a user is a poster based on their User
        ID and admin UUID.

        It returns a JSON response indicating whether the user is a poster or
        not.
      tags:
        - Session-related endpoints
      operationId: session-poster-check
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
      responses:
        '200':
          description: Successful operation. The user's poster status is returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      is_poster:
                        type: boolean
                    required:
                      - is_poster
                  success:
                    type: boolean
                    example: true
                  code:
                    type: integer
                    example: 200
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
  /posts-social:
    get:
      tags:
        - Post-related endpoints
      summary: Retrieve a social of posts based on the user's role
      description: >
        - This endpoint retrieves a social of posts based on the provided
        search criteria, returning a paginated list of posts along with
        pagination metadata.


        - The response varies based on the user's role:
            - **Posters**: Have access to all posts, including unpublished ones.

            - **Paid Members**: Can only view published posts.

            - **Free Members** and **Non-registered Users**: Can also view only published posts, but content associated with paid posts will be returned as null.


        - The `X-Social-User-SSID` and `X-Social-Auth-Id` headers are
        not required. If the request header does not include them, it is treated
        as a request from non-registered users with limited access rights.


        - If the request includes the `last_id` query parameter, the endpoint
        returns only posts after the specified ID. Otherwise, it returns all
        available data.

        - The response includes all associated images and videos to a post.

        - Posts from deleted posters will not be returned.
      operationId: get-posts-social
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - name: X-Social-User-SSID
          in: header
          description: |
            The session ID for User.
          required: false
          schema:
            type: string
            example: MBhdHsd4ckmKNNDaScHCJjuPY5pgGFQOhMSSqPis
        - name: X-Social-Auth-Id
          in: header
          description: |
            The ID used for authentication.
          required: false
          schema:
            type: string
            example: ebbae0f297e50fa92f2eaaa340a1f9125cad6e2d
        - name: last_id
          in: query
          description: >-
            The ID of the last post received in the previous response. Used for
            pagination.
          schema:
            type: string
        - name: media_limit
          in: query
          description: >-
            The maximum number of media items to retrieve per post. If not
            included, all media files associated with the post will be returned.
          schema:
            type: integer
            example: 3
      responses:
        '200':
          description: A list of posts retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PostSocial'
                  success:
                    type: boolean
                    description: Indicates whether the request was successful.
                  code:
                    type: integer
                    description: The HTTP status code of the response.
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              examples:
                example-1:
                  summary: Response for Posters
                  value:
                    data:
                      - id: 01HQSMHSP2N4H9M26FACZHESJE
                        admin_uuid: 1295de24-404b-402f-8ec5-1a5f3231a244
                        type: premium
                        content: Test content
                        is_published: true
                        published_start_at: '2023-11-30 08:00:00'
                        published_end_at: '2024-12-01 18:00:00'
                        updated_at: '2024-02-05 19:16:45'
                        created_at: '2024-02-05 17:55:34'
                        medias:
                          images:
                            - src: >-
                                https://dev-social.api.com/medias/images/7e30d400-7997-426e-b4f6-5b0e3e5082fc_1707123584.jpg
                              id: 01hrw6hg1qweafnzty8bvy73ag
                            - src: >-
                                https://dev-social.api.com/medias/images/7e30d400-7997-426e-b4f6-5b0e3e5082fc_1707123642.jpg
                              id: 01hrw6hg1qweafnzty8bvy73mn
                          videos:
                            - thumbnail: >-
                                https://123456789.cloudfront.net/social/local/medias/thumbnails/97f99721-1615-4572-a612-017a3f193b11.png
                              src: >-
                                https://123456789.cloudfront.net/social/local/video/3d6d2109-a6c9-4b27-a018-c43e389c0567.mp4
                              id: fb890d5b435588b18994
                            - thumbnail: >-
                                https://123456789.cloudfront.net/social/local/medias/thumbnails/97f99721-1615-4572-a612-017a3f193b11.png
                              src: >-
                                https://123456789.cloudfront.net/social/local/video/c63a6455-54e0-48af-9191-7d454fab39ae.mov
                              id: fcb837a492f829c0fad7
                            - thumbnail: >-
                                https://123456789.cloudfront.net/social/local/medias/thumbnails/97f99721-1615-4572-a612-017a3f193b11.png
                              src: >-
                                https://123456789.cloudfront.net/social/local/video/bcf6fdce-1d91-47dd-b045-b8cfa5b139e9.wmv
                              id: 01hrw6hg1qweafnzty8bvy73mn
                        total_medias: 2
                        total_comments: 3
                        total_likes: 0
                        is_liked: false
                        poster:
                          id: 3123qszfkc6fpfya5m7n42zfs22
                          admin_uuid: 6ds37e6-032d-32ds-bb49-3b44ffc0ea122
                          user_id: 123456789
                          nickname: hoctran
                          avatar: >-
                            https://stage.user.com/file/fileconsumer/doo/selector/downloader/phase/download_file/type/images/file_id/phpv2w4cF
                      - id: 01HQSMHSNZH56ATTJRT99W23WQ
                        admin_uuid: 1295de24-404b-402f-8ec5-1a5f3231a244
                        type: free
                        content: This is the post content
                        is_published: false
                        published_start_at: '2023-11-30 08:00:00'
                        published_end_at: '2024-12-01 18:00:00'
                        updated_at: '2024-02-05 19:16:45'
                        created_at: '2024-02-05 17:55:34'
                        medias:
                          images:
                            - src: >-
                                https://dev-social.api.com/medias/images/7e30d400-7997-426e-b4f6-5b0e3e5082fc_1707123584.jpg
                              id: fd40838383e06754d5e1
                            - src: >-
                                https://dev-social.api.com/medias/images/7e30d400-7997-426e-b4f6-5b0e3e5082fc_1707123642.jpg
                              id: fd40838383e06754d5e2
                          videos:
                            - thumbnail: >-
                                https://123456789.cloudfront.net/social/local/medias/thumbnails/97f99721-1615-4572-a612-017a3f193b11.png
                              src: >-
                                https://123456789.cloudfront.net/social/local/video/3d6d2109-a6c9-4b27-a018-c43e389c0567.mp4
                              id: f9c0db9e6125cb1829b1
                            - thumbnail: >-
                                https://123456789.cloudfront.net/social/local/medias/thumbnails/97f99721-1615-4572-a612-017a3f193b11.png
                              src: >-
                                https://123456789.cloudfront.net/social/local/video/c63a6455-54e0-48af-9191-7d454fab39ae.mov
                              id: f9c0db9e6125cb1829b1
                            - thumbnail: >-
                                https://123456789.cloudfront.net/social/local/medias/thumbnails/97f99721-1615-4572-a612-017a3f193b11.png
                              src: >-
                                https://123456789.cloudfront.net/social/local/video/bcf6fdce-1d91-47dd-b045-b8cfa5b139e9.wmv
                              id: f9c0db9e6125cb1829b1
                        total_medias: 4
                        total_comments: 3
                        total_likes: 0
                        is_liked: true
                        poster:
                          id: 3123qszfkc6fpfya5m7n42zfs22
                          admin_uuid: 6ds37e6-032d-32ds-bb49-3b44ffc0ea122
                          user_id: 123456789
                          nickname: hoctran
                          avatar: >-
                            https://stage.user.com/file/fileconsumer/doo/selector/downloader/phase/download_file/type/images/file_id/phpv2w4cF
                    success: true
                    code: 200
                    pagination:
                      offset: 0
                      limit: 30
                      total: 52
                example-2:
                  summary: Response for Paid Members
                  value:
                    data:
                      - id: 01HQSMHSNTR0ZHGSENH080TE32
                        admin_uuid: 1295de24-404b-402f-8ec5-1a5f3231a244
                        type: premium
                        content: Test content
                        is_published: true
                        published_start_at: '2023-11-30 08:00:00'
                        published_end_at: '2024-12-01 18:00:00'
                        poster_id: 01HNKSV9KTR72PWX1NTR0T1K5K
                        updated_at: '2024-02-05 19:16:45'
                        created_at: '2024-02-05 17:55:34'
                        medias:
                          images:
                            - src: >-
                                https://dev-social.api.com/medias/images/7e30d400-7997-426e-b4f6-5b0e3e5082fc_1707123584.jpg
                              id: 01hr6d05ftx6hptm2pw2mbrnb2
                            - src: >-
                                https://dev-social.api.com/medias/images/7e30d400-7997-426e-b4f6-5b0e3e5082fc_1707123642.jpg
                              id: 01hr6d05ftx6hptm2pw2mbrg432
                          videos:
                            - thumbnail: >-
                                https://123456789.cloudfront.net/social/local/medias/thumbnails/97f99721-1615-4572-a612-017a3f193b11.png
                              src: >-
                                https://123456789.cloudfront.net/social/local/video/3d6d2109-a6c9-4b27-a018-c43e389c0567.mp4
                              id: f9c0db9e6125cb1829b1
                            - thumbnail: >-
                                https://123456789.cloudfront.net/social/local/medias/thumbnails/97f99721-1615-4572-a612-017a3f193b11.png
                              src: >-
                                https://123456789.cloudfront.net/social/local/video/c63a6455-54e0-48af-9191-7d454fab39ae.mov
                              id: f9c0db9e6125cb1829b1
                            - thumbnail: >-
                                https://123456789.cloudfront.net/social/local/medias/thumbnails/97f99721-1615-4572-a612-017a3f193b11.png
                              src: >-
                                https://123456789.cloudfront.net/social/local/video/bcf6fdce-1d91-47dd-b045-b8cfa5b139e9.wmv
                              id: f9c0db9e6125cb1829b1
                        total_medias: 2
                        total_comments: 3
                        total_likes: 0
                        is_liked: false
                        poster:
                          id: 3123qszfkc6fpfya5m7n42zfs22
                          admin_uuid: 6ds37e6-032d-32ds-bb49-3b44ffc0ea122
                          user_id: 123456789
                          nickname: hoctran
                          avatar: >-
                            https://stage.user.com/file/fileconsumer/doo/selector/downloader/phase/download_file/type/images/file_id/phpv2w4cF
                      - id: 01HQSMHSNK8GFY0148NB7AF1X3
                        admin_uuid: 1295de24-404b-402f-8ec5-1a5f3231a244
                        type: free
                        content: The content of free post
                        is_published: true
                        published_start_at: '2023-11-30 08:00:00'
                        published_end_at: '2024-12-01 18:00:00'
                        poster_id: 01HNKSV9KTR72PWX1NTR0T1K5K
                        updated_at: '2024-02-05 19:16:45'
                        created_at: '2024-02-05 17:55:34'
                        medias:
                          images:
                            - src: >-
                                https://dev-social.api.com/medias/images/7e30d400-7997-426e-b4f6-5b0e3e5082fc_1707123584.jpg
                              id: f95354e28d0bbd5352ss
                            - src: >-
                                https://dev-social.api.com/medias/images/7e30d400-7997-426e-b4f6-5b0e3e5082fc_1707123642.jpg
                              id: f95354e28d0bbd53054f
                          videos:
                            - thumbnail: >-
                                https://123456789.cloudfront.net/social/local/medias/thumbnails/97f99721-1615-4572-a612-017a3f193b11.png
                              src: >-
                                https://123456789.cloudfront.net/social/local/video/3d6d2109-a6c9-4b27-a018-c43e389c0567.mp4
                              id: f9c0db9e6125cb1829b1
                            - thumbnail: >-
                                https://123456789.cloudfront.net/social/local/medias/thumbnails/97f99721-1615-4572-a612-017a3f193b11.png
                              src: >-
                                https://123456789.cloudfront.net/social/local/video/c63a6455-54e0-48af-9191-7d454fab39ae.mov
                              id: f9c0db9e6125cb1829b1
                            - thumbnail: >-
                                https://123456789.cloudfront.net/social/local/medias/thumbnails/97f99721-1615-4572-a612-017a3f193b11.png
                              src: >-
                                https://123456789.cloudfront.net/social/local/video/bcf6fdce-1d91-47dd-b045-b8cfa5b139e9.wmv
                              id: f9c0db9e6125cb1829b1
                        total_medias: 2
                        total_comments: 3
                        total_likes: 3
                        is_liked: true
                        poster:
                          id: 3123qszfkc6fpfya5m7n42zfs22
                          admin_uuid: 6ds37e6-032d-32ds-bb49-3b44ffc0ea122
                          user_id: 123456789
                          nickname: hoctran
                          avatar: >-
                            https://stage.user.com/file/fileconsumer/doo/selector/downloader/phase/download_file/type/images/file_id/phpv2w4cF
                    success: true
                    code: 200
                    pagination:
                      offset: 0
                      limit: 30
                      total: 2
                example-3:
                  summary: Response for Free Members and Non-registered Users
                  value:
                    data:
                      - id: 01HQSMHRX1B0WA71AXD56P0XVN
                        admin_uuid: 1295de24-404b-402f-8ec5-1a5f3231a244
                        type: premium
                        content: ''
                        is_published: true
                        published_start_at: '2023-11-30 08:00:00'
                        published_end_at: '2024-12-01 18:00:00'
                        poster_id: 01HQSMHDK1YEF7GPQMHFWSK09W
                        updated_at: '2024-02-05 19:16:45'
                        created_at: '2024-02-05 17:55:34'
                        medias:
                          images:
                            - src: >-
                                https://dev-social.api.com/medias/images/7e30d400-7997-426e-b4f6-5b0e3e5082fc_1707123584.jpg
                              id: 01hrw683ph49xd0heqqq785xhj
                            - src: >-
                                https://dev-social.api.com/medias/images/7e30d400-7997-426e-b4f6-5b0e3e5082fc_1707123642.jpg
                              id: 01hrw683ph49xd0heqqq785kdg
                          videos:
                            - thumbnail: >-
                                https://123456789.cloudfront.net/social/local/medias/thumbnails/97f99721-1615-4572-a612-017a3f193b11.png
                              src: >-
                                https://123456789.cloudfront.net/social/local/video/3d6d2109-a6c9-4b27-a018-c43e389c0567.mp4
                              id: f9c0db9e6125cb1829b1
                            - thumbnail: >-
                                https://123456789.cloudfront.net/social/local/medias/thumbnails/97f99721-1615-4572-a612-017a3f193b11.png
                              src: >-
                                https://123456789.cloudfront.net/social/local/video/c63a6455-54e0-48af-9191-7d454fab39ae.mov
                              id: f9c0db9e6125cb1829b1
                            - thumbnail: >-
                                https://123456789.cloudfront.net/social/local/medias/thumbnails/97f99721-1615-4572-a612-017a3f193b11.png
                              src: >-
                                https://123456789.cloudfront.net/social/local/video/bcf6fdce-1d91-47dd-b045-b8cfa5b139e9.wmv
                              id: f9c0db9e6125cb1829b1
                        total_medias: 2
                        total_comments: 3
                        total_likes: 0
                        is_liked: false
                        poster:
                          id: 3123qszfkc6fpfya5m7n42zfs22
                          admin_uuid: 6ds37e6-032d-32ds-bb49-3b44ffc0ea122
                          user_id: 123456789
                          nickname: hoctran
                          avatar: >-
                            https://stage.user.com/file/fileconsumer/doo/selector/downloader/phase/download_file/type/images/file_id/phpv2w4cF
                      - id: 01HQSMHRX5K5X0Y61AY0F6PTZ6
                        admin_uuid: 1295de24-404b-402f-8ec5-1a5f3231a244
                        type: free
                        content: The content of free post
                        is_published: true
                        published_start_at: '2023-11-30 08:00:00'
                        published_end_at: '2024-12-01 18:00:00'
                        poster_id: 01HQSMHDK1YEF7GPQMHFWSK09W
                        updated_at: '2024-02-05 19:16:45'
                        created_at: '2024-02-05 17:55:34'
                        medias:
                          images:
                            - src: >-
                                https://dev-social.api.com/medias/images/7e30d400-7997-426e-b4f6-5b0e3e5082fc_1707123584.jpg
                              id: 01hrw6hg1qweafnzty8bvy73ag
                            - src: >-
                                https://dev-social.api.com/medias/images/7e30d400-7997-426e-b4f6-5b0e3e5082fc_1707123642.jpg
                              id: f8331b0c7c1bc2b1574e
                          videos:
                            - thumbnail: >-
                                https://123456789.cloudfront.net/social/local/medias/thumbnails/97f99721-1615-4572-a612-017a3f193b11.png
                              src: >-
                                https://123456789.cloudfront.net/social/local/video/3d6d2109-a6c9-4b27-a018-c43e389c0567.mp4
                              id: f9c0db9e6125cb1829b1
                            - thumbnail: >-
                                https://123456789.cloudfront.net/social/local/medias/thumbnails/97f99721-1615-4572-a612-017a3f193b11.png
                              src: >-
                                https://123456789.cloudfront.net/social/local/video/c63a6455-54e0-48af-9191-7d454fab39ae.mov
                              id: f9c0db9e6125cb1829b1
                            - thumbnail: >-
                                https://123456789.cloudfront.net/social/local/medias/thumbnails/97f99721-1615-4572-a612-017a3f193b11.png
                              src: >-
                                https://123456789.cloudfront.net/social/local/video/bcf6fdce-1d91-47dd-b045-b8cfa5b139e9.wmv
                              id: f9c0db9e6125cb1829b1
                        total_medias: 2
                        total_comments: 3
                        total_likes: 3
                        is_liked: false
                        poster:
                          id: 3123qszfkc6fpfya5m7n42zfs22
                          admin_uuid: 6ds37e6-032d-32ds-bb49-3b44ffc0ea122
                          user_id: 123456789
                          nickname: hoctran
                          avatar: >-
                            https://stage.user.com/file/fileconsumer/doo/selector/downloader/phase/download_file/type/images/file_id/phpv2w4cF
                    success: true
                    code: 200
                    pagination:
                      offset: 0
                      limit: 30
                      total: 2
        '401':
          description: Unauthorized. HMAC authentication failed or invalid session ID.
          content:
            application/json:
              examples:
                HMACAuthenticationFailed:
                  summary: HMAC authentication failed.
                  value:
                    success: false
                    code: 401
                    errors:
                      message: >-
                        HMAC authentication was failed. Please make sure your
                        credentials again.
                      code: 401001
  /posts:
    get:
      summary: Retrieve a list of posts
      description: >
        This endpoint retrieves a paginated list of posts based on the provided
        search criteria. Only users with specific roles are allowed to access
        this endpoint. - Only Administrators and Posters are allowed to access.
        - Otherwise, access denied.
      tags:
        - Post-related endpoints
      operationId: get-posts-list-resource
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
        - $ref: '#/components/parameters/is_published'
        - $ref: '#/components/parameters/poster_id'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/published_start_at_from'
        - $ref: '#/components/parameters/published_start_at_until'
        - $ref: '#/components/parameters/published_end_at_from'
        - $ref: '#/components/parameters/published_end_at_until'
        - $ref: '#/components/parameters/content'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: A list of posts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  success:
                    type: boolean
                    description: Indicates whether the request was successful
                  code:
                    type: integer
                    description: The HTTP status code of the response
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '403':
          $ref: '#/components/responses/403ForbiddenResponse'
    post:
      summary: Store a newly created post
      description: |
        This endpoint creates a new post and stores it in the database.
      tags:
        - Post-related endpoints
      operationId: create-post
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
      requestBody:
        $ref: '#/components/requestBodies/PosterCreatePostRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/201CreatedPostResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: {}
                    description: Empty array if no data is returned
                  success:
                    type: boolean
                    description: Indicates whether the request was successful
                  code:
                    type: integer
                    description: The HTTP status code of the response
                  errors:
                    type: object
                    properties:
                      message:
                        type: string
                        description: Error message
                      validation:
                        type: array
                        items:
                          type: object
                          properties:
                            attribute:
                              type: string
                              description: The attribute causing the validation error
                            errors:
                              type: array
                              items:
                                type: object
                                properties:
                                  key:
                                    type: string
                                    description: The error key
                                  message:
                                    type: string
                                    description: The error message
              example:
                data: []
                success: false
                code: 400
                errors:
                  message: >-
                    The request parameters are incorrect, please make sure to
                    follow the documentation about request parameters of the
                    resource.
                  validation:
                    - attribute: poster_id
                      errors:
                        - key: Required
                          message: required|The poster id field is required.
                    - attribute: type
                      errors:
                        - key: Required
                          message: required|The type field is required.
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '403':
          $ref: '#/components/responses/403ForbiddenResponse'
        '404':
          $ref: '#/components/responses/404PosterResourceNotFoundResponse'
        '409':
          description: Conflict. The media is already associated with another post.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates whether the request was successful
                  code:
                    type: integer
                    description: The HTTP status code of the response
                  errors:
                    type: object
                    properties:
                      message:
                        type: string
                        description: Error message indicating the conflict
                      code:
                        type: integer
                        description: Error code indicating the specific error
              example:
                success: false
                code: 409
                errors:
                  message: >-
                    メディア（ID
                    01hnw7xbw6md3tje5pdfgy92yr）は該当の投稿に関連付けることができませんでした。既に別の投稿に関連付けられています。
                  code: 409001
        '500':
          $ref: '#/components/responses/500FatalResponse'
  '/posts/{id}':
    get:
      summary: Retrieve a specific post
      description: >
        - This endpoint retrieves a specific post by its unique identifier (ID).

        - The response includes detailed information about the post, and
        information about the poster.

        - Returns the latest 30 comments. To retrieve more comments, use `GET
        /posts/{postId}/comments`
      tags:
        - Post-related endpoints
      operationId: get-post-by-id
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
        - name: id
          in: path
          description: The ID of the post to retrieve
          required: true
          schema:
            type: string
          example: 01hnw7nqm19g9302c7wq391nvm
      responses:
        '200':
          description: Post retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SinglePostItemResponse'
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '403':
          $ref: '#/components/responses/403ForbiddenResponse'
        '404':
          $ref: '#/components/responses/404PostResourceNotFoundResponse'
    put:
      summary: Update an existing post
      description: |
        Update an existing post with the provided data.

        Note:
          - When adding new media, the request payload must include both the existing media IDs and the new media IDs. If the request payload does not contain the existing IDs, it will be treated as deleting the existing media IDs.
          - When updating media, the Social API will handle the provided media IDs as follows:
              - Associate the new media with the post if the new IDs are not already associated.
              - Keep the media if the media IDs already exist.
              - Unassociate the existing media with the post if the IDs are not provided in the request payload.
      tags:
        - Post-related endpoints
      operationId: update-a-specific-post
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
        - name: id
          in: path
          description: The ID of the post to be updated
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                is_published:
                  type: boolean
                  description: Indicates whether the post is published
                  example: true
                type:
                  type: string
                  description: The type of post
                  enum:
                    - free
                    - premium
                  example: premium
                published_start_at:
                  type: string
                  format: date-time
                  description: The start date and time of the post's publication
                  example: '2023-11-30 08:00:00'
                published_end_at:
                  type: string
                  format: date-time
                  description: The end date and time of the post's publication
                  example: '2024-12-01 18:00:00'
                content:
                  type: string
                  description: The content of the post
                  example: Test content
                media_ids:
                  type: array
                  description: IDs of media files associated with the post
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: The ID of the media file
                        example: 01hnw7xbw6md3tje5pdfgy92yr
      responses:
        '200':
          description: The post was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SinglePostItemResponse'
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '403':
          $ref: '#/components/responses/403ForbiddenResponse'
        '404':
          $ref: '#/components/responses/404PostResourceNotFoundResponse'
        '409':
          description: >-
            Conflict - The specified media is already associated with another
            post
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  code:
                    type: integer
                    example: 409
                  errors:
                    type: object
                    properties:
                      message:
                        type: string
                        example: >-
                          メディア（ID
                          01hnw850hwr999fdtd39tfasac）は該当の投稿に関連付けることができませんでした。既に別の投稿に関連付けられています。
                      code:
                        type: integer
                        example: 409001
        '500':
          $ref: '#/components/responses/500FatalResponse'
    delete:
      summary: Delete a post by ID
      description: Delete a post by ID
      tags:
        - Post-related endpoints
      operationId: delete-a-specific-post
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
        - in: path
          name: id
          required: true
          description: The ID of the post to delete
          schema:
            type: string
            example: 01hnw7xbw6md3tje5pdfgy92yr
      responses:
        '204':
          description: The post was successfully deleted
          content:
            application/json:
              schema:
                type: string
              examples:
                no_content:
                  value: ''
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '403':
          $ref: '#/components/responses/403ForbiddenResponse'
        '404':
          $ref: '#/components/responses/404PostResourceNotFoundResponse'
        '500':
          $ref: '#/components/responses/500FatalResponse'
  /medias:
    get:
      summary: Retrieve a list of media items
      description: >
        This endpoint allows users to retrieve a list of media items based on
        optional filtering parameters.
      tags:
        - Media-related endpoints
      operationId: get-media-list
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
        - in: query
          name: post_id
          schema:
            type: string
          description: The ID of the post associated with the media items
        - in: query
          name: type
          schema:
            type: string
          description: The type of media items to filter by
      responses:
        '200':
          description: Success response containing a list of media items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaList'
              example:
                data:
                  - id: 01hnwazag8mq5s1ga3zswp6afr
                    post_id: ''
                    type: video
                    path: >-
                      https://123456789.cloudfront.net/social/staging/medias/videos/d93c51e2-6397-4833-afdb-f2c6136b4121_1707126794.mp4
                    thumnail: >-
                      https://123456789.cloudfront.net/social/staging/medias/thumbnail/d93c51e2-6397-4833-afdb-f2c6136b4121_1707126123.png
                    updated_at: '2024-02-05 18:55:59'
                    created_at: '2024-02-05 18:53:14'
                  - id: 01hnwa050qbpffgkpykgmeh012
                    post_id: null
                    type: video
                    path: >-
                      https://123456789.cloudfront.net/social/staging/medias/videos/f5f613a4-62ce-4b91-9814-22faa30c66d9_1707125773.mp4
                    thumnail: >-
                      https://123456789.cloudfront.net/social/staging/medias/thumbnail/d93c51e2-6397-4833-afdb-f2c6136b4121_1707126123.png
                    updated_at: '2024-02-05 18:57:16'
                    created_at: '2024-02-05 18:36:13'
                  - id: 01hnw85ayjxhwzd4affh18mrqr
                    post_id: null
                    type: video
                    path: >-
                      https://123456789.cloudfront.net/social/staging/medias/videos/8890d6d0-95dc-4f39-a43a-61e8016586d3_1707123845.mp4
                    thumnail: >-
                      https://123456789.cloudfront.net/social/staging/medias/thumbnail/d93c51e2-6397-4833-afdb-f2c6136b4121_1707126123.png
                    updated_at: '2024-02-05 18:05:33'
                    created_at: '2024-02-05 18:04:06'
                success: true
                code: 200
                pagination:
                  offset: 0
                  limit: 30
                  total: 3
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '403':
          $ref: '#/components/responses/403ForbiddenResponse'
    post:
      operationId: create-a-new-media
      summary: Create a new media item
      description: >
        This endpoint allows users to upload media files such as images and
        videos. If the `post_id` is null, it indicates that the media is being
        uploaded independently and will not be associated with any specific
        post, similar to the functionality on platforms like Facebook or
        Twitter.

        - Supported file formats for images include APNG, PNG, JPEG, and JPG.

        - Supported formats for videos include MP4, MOV, WMV, and WAV.

        - Uploaded files are subject to size limitations:
          - Images must not exceed 10MB.
          - Videos must not exceed 1GB.
      tags:
        - Media-related endpoints
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: form-data
                thumbnail:
                  type: string
                  format: form-data
              required:
                - file
      responses:
        '201':
          description: Success response indicating the media item was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaItem'
              example:
                data:
                  id: 01hp0zsjgzhyetx9d605fd3h7q
                  post_id: null
                  type: image
                  path: >-
                    https://123456789.cloudfront.net/social/staging/medias//images/e0c8535a-85a8-4225-9b61-bba6d832708e_1707282842.jpg
                  thumnail: >-
                    https://123456789.cloudfront.net/social/staging/medias/thumbnail/d93c51e2-6397-4833-afdb-f2c6136b4121_1707126123.png
                  updated_at: '2024-02-07 14:14:04'
                  created_at: '2024-02-07 14:14:04'
                success: true
                code: 201
        '400':
          description: >-
            Bad request response indicating validation errors in the request
            parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorWithValidation'
              example:
                data: []
                success: false
                code: 400
                errors:
                  message: >-
                    The request parameters are incorrect, please make sure to
                    follow the documentation about request parameters of the
                    resource.
                  validation:
                    - attribute: file
                      errors:
                        - key: Required
                          message: required|The file field is required.
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '403':
          $ref: '#/components/responses/403ForbiddenResponse'
        '500':
          description: >-
            Internal server error response indicating a failure occurred during
            the file upload process
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                code: 500
                errors:
                  message: >-
                    Failed to upload file. The S3 file path is
                    social/local/medias/images/66ef66a6-1ce0-4593-a424-98a339308a92_1707283158.jpg
                  code: 500002
  '/medias/{id}':
    get:
      summary: Retrieve a specific media item
      description: |
        This endpoint allows users to retrieve a specific media item by its ID.
      tags:
        - Media-related endpoints
      operationId: retrieve-a-specific-media
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: 01hnwazag8mq5s1ga3zswp6afr
          description: The ID of the media item to retrieve
      responses:
        '200':
          description: Success response containing the requested media item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaItem'
              example:
                data:
                  id: 01hnwazag8mq5s1ga3zswp6afr
                  post_id: 01hnw7nqm19g9302c7wq391nvm
                  type: video
                  path: >-
                    https://123456789.cloudfront.net/social/staging/medias/videos/d93c51e2-6397-4833-afdb-f2c6136b4121_1707126794.mp4
                  thumnail: >-
                    https://123456789.cloudfront.net/social/staging/medias/thumbnail/d93c51e2-6397-4833-afdb-f2c6136b4121_1707126123.png
                  updated_at: '2024-02-05 18:55:59'
                  created_at: '2024-02-05 18:53:14'
                success: true
                code: 200
                pagination: null
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '403':
          $ref: '#/components/responses/403ForbiddenResponse'
        '404':
          description: >-
            Not found response indicating the requested media item does not
            exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                code: 404
                errors:
                  message: ID 01hnwazag8mq5s1ga3zswp6afr1に一致するメディアは見つかりませんでした。
                  code: 404001
    put:
      summary: Update a media
      description: Update an existing media with the provided data.
      tags:
        - Media-related endpoints
      operationId: update-a-specific-media
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
        - name: id
          in: path
          description: The ID of the media to be updated
          required: true
          schema:
            type: string
            example: 01hnwazag8mq5s1ga3zswp6afr
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                post_id:
                  type: string
                  example: 01hnwazag8mq5s1ga3zswp6afr
              required:
                - post_id
      responses:
        '200':
          description: The post was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SinglePostItemResponse'
              example:
                data:
                  id: 01hnwazag8mq5s1ga3zswp6afr
                  post_id: 01hnw7pynwbmqe5rghta5s1ed6
                  type: video
                  path: >-
                    https://123456789.cloudfront.net/social/staging/medias/videos/d93c51e2-6397-4833-afdb-f2c6136b4121_1707126794.mp4
                  thumnail: >-
                    https://123456789.cloudfront.net/social/staging/medias/thumbnail/d93c51e2-6397-4833-afdb-f2c6136b4121_1707126123.png
                  updated_at: '2024-02-07 16:08:43'
                  created_at: '2024-02-05 18:53:14'
                success: true
                code: 200
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '403':
          $ref: '#/components/responses/403ForbiddenResponse'
        '404':
          description: The requested post or media was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example-1:
                  value:
                    success: false
                    code: 404
                    errors:
                      message: ID 01hnwazag8mq5s1ga3zswp6afr1に一致するメディアは見つかりませんでした。
                      code: 404001
                example-2:
                  value:
                    success: false
                    code: 404
                    errors:
                      message: ID 01hnw7nqm19g9302c7wq391nvm11に一致する投稿は見つかりませんでした。
                      code: 404001
        '409':
          description: Conflict - Unable to associate media with the specified post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                code: 409
                errors:
                  message: >-
                    メディア（ID
                    01hnwazag8mq5s1ga3zswp6afr）は該当の投稿に関連付けることができませんでした。既に別の投稿に関連付けられています。
                  code: 409001
    delete:
      summary: Delete a media
      description: Delete the specified media resource.
      tags:
        - Media-related endpoints
      operationId: delete-a-specific-media
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
        - name: id
          in: path
          description: The ID of the media to be updated
          required: true
          schema:
            type: string
            example: 01hnwazag8mq5s1ga3zswp6afr
      responses:
        '204':
          description: The media was successfully deleted
          content:
            application/json:
              schema:
                type: string
              examples:
                no_content:
                  value: ''
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '403':
          $ref: '#/components/responses/403ForbiddenResponse'
        '404':
          description: The requested media was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                code: 404
                errors:
                  message: ID 01hnwa050qbpffgkpykgmeh012に一致するメディアは見つかりませんでした。
                  code: 404001
  '/posts/{postId}/comments':
    get:
      summary: Retrieve comments for a specific post
      description: >
        - This endpoint retrieves comments associated with a specific post.

        - Everyone do have permission to view comments.

        - Returns the latest 30 comments. To retrieve more comments, provide the
        `last_id` parameter instead of offset to paginate.

        - Please pass the ID of the oldest comment currently displayed via
        `last_id`,

        and fetch the next 30 comments after that ID.

        - Nickname and avatar information of the commenter are fetched from the
        CRM API and are not managed by the Social API.
      tags:
        - Comment-related endpoints
      operationId: retrieve-comments-for-specific-post
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
        - name: postId
          in: path
          description: The ID of the post to retrieve comments for
          required: true
          schema:
            type: string
            example: 01hnw7nqm19g9302c7wq391nvm
        - name: comment
          in: query
          description: Filter comments by content
          schema:
            type: string
        - name: is_hidden
          in: query
          description: Filter comments by visibility status
          schema:
            type: boolean
        - name: user_id
          in: query
          description: Filter comments by User ID
          schema:
            type: integer
        - name: last_id
          in: query
          description: Filter comments by last ID
          schema:
            type: string
      responses:
        '200':
          description: A list of comments associated with the specified post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentList'
              examples:
                comment_list:
                  value:
                    data:
                      - id: 01hqt9drrjar3rc0ge0zpxwv93
                        user_id: 123456789
                        nickname: hoctran
                        avatar: >-
                          https://stage.user.com/file/fileconsumer/doo/selector/downloader/phase/download_file/type/images/file_id/phpv2w4cF
                        post_id: 01hqt819gw8q83hfedkpbq5cp0
                        comment: Your updated comment haha
                        is_hidden: false
                        updated_at: '2024-02-29 20:20:37'
                        created_at: '2024-02-29 20:19:05'
                      - id: 01hqt99m80ymwtk3gqhr42j2by
                        user_id: 123456789
                        nickname: hoctran
                        avatar: >-
                          https://stage.user.com/file/fileconsumer/doo/selector/downloader/phase/download_file/type/images/file_id/phpv2w4cF
                        post_id: 01hqt819gw8q83hfedkpbq5cp0
                        comment: Yabai Japanese
                        is_hidden: false
                        updated_at: '2024-02-29 20:16:50'
                        created_at: '2024-02-29 20:16:50'
                    success: true
                    code: 200
                    pagination:
                      offset: 0
                      limit: 30
                      total: 2
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '404':
          $ref: '#/components/responses/404PostResourceNotFoundResponse'
    post:
      summary: Store a newly created comment
      description: >
        This endpoint allows users to create a new comment for a specific post.
        The Social API will deny the request if the `comment` parameter
        contains any prohibited words that were registered in the CRM API.

        Please note the following:

        - Only registered users with appropriate permissions (posters and paid
        members) can leave comments on posts.

        - Nickname and avatar information of the commenter are fetched from the
        CRM API and are not managed by the Social API.

        - The prohibited (NG) words are managed by the CRM API, not by the
        Social API. For more information on managing prohibited words, please
        refer to the [CRM API
        documentation](https://apidoc.hoctran.io/tranvelocity/crm-laravel/v1/staging/#tag/Group-NgWord/operation/post-1-batch-ng-words).

        - Only posters may leave comments containing NG words.

        - Restricted users cannot leave comments.

        - Users who exceed the allowed number of comments in a specific time
        frame (e.g., maximum of 2 comments per hour) must wait before commenting
        again.
      tags:
        - Comment-related endpoints
      operationId: create-new-comment
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
        - name: postId
          in: path
          description: The ID of the post for which the comment is created
          required: true
          schema:
            type: string
          example: 01hnw7nqm19g9302c7wq391nvm
      requestBody:
        $ref: '#/components/requestBodies/CreateCommentRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/201CreatedCommentResponse'
        '400':
          description: >-
            Bad request - Missing required parameters or contains prohibited
            word
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                prohibited_word:
                  summary: Comment contains prohibited word
                  value:
                    success: false
                    code: 400
                    errors:
                      message: 'The comment contains a prohibited word: `バカ`.'
                      code: 400001
                validation_error:
                  summary: Validation error - Missing required parameter
                  value:
                    data: []
                    success: false
                    code: 400
                    errors:
                      message: required|The comment field is required.
                      validation:
                        - attribute: comment
                          errors:
                            - key: Required
                              message: required|The comment field is required.
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '403':
          description: Forbidden - Access Denied
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates whether the request was successful
                    example: false
                  code:
                    type: integer
                    description: The HTTP status code of the response
                    example: 403
                  errors:
                    type: object
                    properties:
                      message:
                        type: string
                        description: >-
                          A message explaining the reason for the forbidden
                          access
                        example: コメントを新しく作成する権限がありません。
                      code:
                        type: integer
                        description: A code indicating the specific error
                        example: 403001
              examples:
                permission_denied:
                  summary: Permission denied to create a comment
                  value:
                    success: false
                    code: 403
                    errors:
                      message: コメントを新しく作成する権限がありません。
                      code: 403001
                restricted_user:
                  summary: User is restricted and cannot comment
                  value:
                    success: false
                    code: 403
                    errors:
                      message: あなたは制限ユーザーのため、コメントを投稿できません。
                      code: 403001
                rate_limit_exceeded:
                  summary: Comment rate limit exceeded
                  value:
                    success: false
                    code: 403
                    errors:
                      message: 指定された時間内に許可されたコメントの最大数に達しました。（1時間につき最大2回までコメントできます。）
                      code: 403001
        '404':
          $ref: '#/components/responses/404PostResourceNotFoundResponse'
  '/posts/{postId}/comments/{id}':
    get:
      summary: Retrieve a specific comment
      description: >
        - Retrieve the specified comment resource by ID.

        - Everyone can view published comments

        - Nickname and avatar information of the commenter are fetched from the
        CRM API and are not managed by the Social API.
      tags:
        - Comment-related endpoints
      operationId: retrieve-a-specific-comment-for-specific-post
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
        - name: postId
          in: path
          description: The ID of the post containing the comment.
          required: true
          schema:
            type: string
            example: 01hnw7nqm19g9302c7wq391nvm
        - name: id
          in: path
          description: The ID of the comment to retrieve.
          required: true
          schema:
            type: string
            example: 01hnwcp6kd9a50w0hy2q0tg0zd
      responses:
        '200':
          description: Comment retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResource'
              example:
                data:
                  id: 01hpjnnfennwxzgreg2r5wtx7f
                  user_id: 123456789
                  nickname: hoctran
                  avatar: >-
                    https://stage.user.com/file/fileconsumer/doo/selector/downloader/phase/download_file/type/images/file_id/phpv2w4cF
                  comment: Your comment goes here
                  is_hidden: false
                  updated_at: '2024-02-14 11:03:23'
                  created_at: '2024-02-14 11:03:23'
                  total_comments: 2
                  post:
                    id: 01hp47vb1hcr1bcdr3c79bx6xm
                    admin_uuid: 1295de24-404b-402f-8ec5-1a5f3231a244
                    type: premium
                    content: Test content
                    is_published: true
                    published_start_at: '2023-11-30 08:00:00'
                    published_end_at: '2024-12-01 18:00:00'
                    updated_at: '2024-02-08 20:34:12'
                    created_at: '2024-02-08 20:32:33'
                success: true
                code: 200
                pagination: null
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '404':
          description: Comment or post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example-1:
                  value:
                    success: false
                    code: 404
                    errors:
                      message: ID 01hnw7nqm19g9302c7wq391nvm11に一致する投稿は見つかりませんでした。
                      code: 404001
                example-2:
                  value:
                    success: false
                    code: 404
                    errors:
                      message: ID 01hnw7nqm19g9302c7wq391nvm11に一致するコメントは見つかりませんでした。
                      code: 404001
    put:
      summary: Update a comment
      description: >
        - Update the specified comment in storage. - The Social API will deny
        the request if the `comment` parameter contains any prohibited words
        that were registered in the CRM API.

        - Posters have permission to update user's comments

        - Commenter who left the comment have permission to update their
        comments. A user cannot update comments of other commenters

        - Nickname and avatar information of the commenter are fetched from the
        CRM API and are not managed by the Social API.

        - The prohibited (NG) words are managed by the CRM API, not by the
        Social API. For more information on managing prohibited words, please
        refer to the [CRM API
        documentation](https://apidoc.hoctran.io/tranvelocity/crm-laravel/v1/staging/#tag/Group-NgWord/operation/post-1-batch-ng-words).

        - Only posters may leave comments containing NG words.
      tags:
        - Comment-related endpoints
      operationId: update-a-specific-comment
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
        - name: postId
          in: path
          description: The ID of the post associated with the comment.
          required: true
          schema:
            type: string
            example: 01hnw7nqm19g9302c7wq391nvm
        - name: id
          in: path
          description: The ID of the comment to update.
          required: true
          schema:
            type: string
            example: 01hnwcp6kd9a50w0hy2q0tg0zd
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentRequest'
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResource'
              example:
                data:
                  id: 01hqt9drrjar3rc0ge0zpxwv93
                  user_id: 123456789
                  nickname: hoctran
                  avatar: >-
                    https://stage.user.com/file/fileconsumer/doo/selector/downloader/phase/download_file/type/images/file_id/phpv2w4cF
                  comment: Your updated comment haha
                  is_hidden: false
                  updated_at: '2024-02-29 20:20:37'
                  created_at: '2024-02-29 20:19:05'
                  total_comments: 2
                  post:
                    id: 01hqt819gw8q83hfedkpbq5cp0
                    admin_uuid: 6ds37e6-032d-32ds-bb49-3b44ffc0ea122
                    type: premium
                    content: Test content
                    is_published: true
                    published_start_at: '2023-11-30 08:00:00'
                    published_end_at: '2024-12-01 18:00:00'
                    updated_at: '2024-02-29 20:02:21'
                    created_at: '2024-02-29 19:54:48'
                success: true
                code: 200
        '400':
          description: >-
            Bad request - Missing required parameters or contains prohibited
            word
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                prohibited_word:
                  summary: Comment contains prohibited word
                  value:
                    success: false
                    code: 400
                    errors:
                      message: 'The comment contains a prohibited word: `バカ`.'
                      code: 400001
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '403':
          $ref: '#/components/responses/403ForbiddenResponse'
        '404':
          $ref: '#/components/responses/404CommentAndPostResourceNotFoundResponse'
    delete:
      summary: Delete a comment
      description: >
        Remove the specified comment from storage. Only administrators, posters,
        and commenters have permission to delete a comment.
      tags:
        - Comment-related endpoints
      operationId: delete-a-specific-comment
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
        - name: postId
          in: path
          description: The ID of the post associated with the comment.
          required: true
          schema:
            type: string
            example: 01hnw7nqm19g9302c7wq391nvm
        - name: id
          in: path
          description: The ID of the comment to delete.
          required: true
          schema:
            type: string
            example: 01hnwcp6kd9a50w0hy2q0tg0zd
      responses:
        '204':
          description: The media was successfully deleted
          content:
            application/json:
              schema:
                type: string
                example: No content
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '403':
          $ref: '#/components/responses/403ForbiddenResponse'
        '404':
          $ref: '#/components/responses/404CommentAndPostResourceNotFoundResponse'
  '/posts/{postId}/comments/{id}/publish':
    post:
      summary: Publish a comment
      description: >
        - Publishes a comment associated with a post.

        - Only posters have permission to publish a comment

        - Nickname and avatar information of the commenter are fetched from the
        CRM API and are not managed by the Social API.
      tags:
        - Comment-related endpoints
      operationId: publish-a-comment
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
        - name: postId
          in: path
          description: The ID of the post associated with the comment.
          required: true
          schema:
            type: string
            example: 01hnw7nqm19g9302c7wq391nvm
        - name: id
          in: path
          description: The ID of the comment to publish.
          required: true
          schema:
            type: string
            example: 01hnwcp6kd9a50w0hy2q0tg0zd
      responses:
        '200':
          description: Comment published successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResource'
              example:
                data:
                  id: 01hnwcp6kd9a50w0hy2q0tg0zd
                  user_id: 123456789
                  nickname: hoctran
                  avatar: >-
                    https://stage.user.com/file/fileconsumer/doo/selector/downloader/phase/download_file/type/images/file_id/phpv2w4cF
                  comment: Your comment goes here
                  is_hidden: false
                  updated_at: '2024-02-07 19:08:15'
                  created_at: '2024-02-05 19:23:13'
                  post:
                    id: 01hnw7nqm19g9302c7wq391nvm
                    admin_uuid: 1295de24-404b-402f-8ec5-1a5f3231a244
                    type: premium
                    content: Test content
                    is_published: true
                    published_start_at: '2023-11-30 08:00:00'
                    published_end_at: '2024-12-01 18:00:00'
                    updated_at: '2024-02-07 00:12:26'
                    created_at: '2024-02-05 17:55:34'
                success: true
                code: 200
                pagination: null
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '403':
          $ref: '#/components/responses/403ForbiddenResponse'
        '404':
          $ref: '#/components/responses/404CommentAndPostResourceNotFoundResponse'
  '/posts/{postId}/comments/{id}/unpublish':
    post:
      summary: Unpublishes a comment
      description: >
        - Unpublishes a comment associated with a post.

        - Only posters have permission to unpublish a comment

        - Nickname and avatar information of the commenter are fetched from the
        CRM API and are not managed by the Social API.
      tags:
        - Comment-related endpoints
      operationId: unpublish-a-comment
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
        - name: postId
          in: path
          description: The ID of the post associated with the comment.
          required: true
          schema:
            type: string
            example: 01hnw7nqm19g9302c7wq391nvm
        - name: id
          in: path
          description: The ID of the comment to publish.
          required: true
          schema:
            type: string
            example: 01hnwcp6kd9a50w0hy2q0tg0zd
      responses:
        '200':
          description: Comment unpublished successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResource'
              example:
                data:
                  id: 01hnwcp6kd9a50w0hy2q0tg0zd
                  user_id: 123456789
                  nickname: hoctran
                  avatar: >-
                    https://stage.user.com/file/fileconsumer/doo/selector/downloader/phase/download_file/type/images/file_id/phpv2w4cF
                  comment: Your comment goes here
                  is_hidden: false
                  updated_at: '2024-02-07 19:08:15'
                  created_at: '2024-02-05 19:23:13'
                  post:
                    id: 01hnw7nqm19g9302c7wq391nvm
                    admin_uuid: 1295de24-404b-402f-8ec5-1a5f3231a244
                    type: premium
                    content: Test content
                    is_published: true
                    published_start_at: '2023-11-30 08:00:00'
                    published_end_at: '2024-12-01 18:00:00'
                    updated_at: '2024-02-07 00:12:26'
                    created_at: '2024-02-05 17:55:34'
                success: true
                code: 200
                pagination: null
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '403':
          $ref: '#/components/responses/403ForbiddenResponse'
        '404':
          $ref: '#/components/responses/404CommentAndPostResourceNotFoundResponse'
  '/posts/{postId}/likes':
    get:
      summary: Retrieve a list of likes for a specific post
      description: |
        Display a listing of likes associated with a specific post.
      tags:
        - Like-related endpoints
      operationId: retrieve-like-list
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
        - name: postId
          in: path
          description: The ID of the post to retrieve likes for.
          required: true
          schema:
            type: string
            example: 01hnw7nqm19g9302c7wq391nvm
      responses:
        '200':
          description: A list of likes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LikeResource'
                  success:
                    type: boolean
                  code:
                    type: integer
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                  - id: 01hnw7nqm19g9302c7wq391nvb
                    user_id: 123456789
                    post_id: 01hnw7nqm19g9302c7wq391nvm
                    created_at: '2024-02-05 17:55:34'
                success: true
                code: 200
                pagination:
                  offset: 0
                  limit: 30
                  total: 1
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '403':
          $ref: '#/components/responses/403ForbiddenResponse'
        '404':
          $ref: '#/components/responses/404PostResourceNotFoundResponse'
  '/posts/{postId}/like':
    post:
      summary: Create a like for a post
      description: >
        - This endpoint enables users to like a specific post, storing the newly
        created like in storage. - The liker is determined based on the user's
        login session.

        - Permissions:
          - Posters and premium members can like both free and premium posts.
          - Free members can like only free posts.
          - Non-logged-in users have no permission to like any posts.

        - Additionally, the endpoint retrieves the total number of likes for the
        specified post.
      tags:
        - Like-related endpoints
      operationId: create-like
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
        - name: postId
          in: path
          description: The ID of the post for which the like is created.
          required: true
          schema:
            type: string
            example: 01hnw7nqm19g9302c7wq391nvm
      responses:
        '201':
          description: New like created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikePostResource'
              example:
                data:
                  post_id: 01hnw7nqm19g9302c7wq391nvm
                  user_id: 123456789
                  action: liked
                  total_likes: 1
                success: true
                code: 201
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '403':
          $ref: '#/components/responses/403ForbiddenResponse'
        '404':
          $ref: '#/components/responses/404PostResourceNotFoundResponse'
  '/posts/{postId}/unlike':
    post:
      summary: Create a unlike for a post
      description: >
        - This endpoint allows users to remove their like from a specific post,
        removing the like history from storage.

        - Permissions:
          - Posters and premium members can like both free and premium posts.
          - Free members can like only free posts.
          - Non-logged-in users have no permission to like any posts.

        - Additionally, the endpoint returns the updated total number of likes
        for the post after reflecting the unlike action.
      tags:
        - Like-related endpoints
      operationId: create-unlike
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - $ref: '#/components/parameters/X-Social-User-SSID'
        - $ref: '#/components/parameters/X-Social-Auth-Id'
        - name: postId
          in: path
          description: The ID of the post for which the unlike is created.
          required: true
          schema:
            type: string
            example: 01hnw7nqm19g9302c7wq391nvm
      responses:
        '201':
          description: New unlike created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnLikePostResource'
              example:
                data:
                  post_id: 01hnw7nqm19g9302c7wq391nvm
                  user_id: 123456789
                  action: unliked
                  total_likes: 1
                success: true
                code: 201
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
        '403':
          $ref: '#/components/responses/403ForbiddenResponse'
        '404':
          $ref: '#/components/responses/404PostResourceNotFoundResponse'
  '/clear-caches/member/{userId}':
    delete:
      summary: Clear cached role
      description: >
        Clears the cached member data and member role of a specific member.

        This endpoint is helpful in scenarios such as:

        - When a free member upgrades to a paid subscription, their member role
        may be cached, causing delays in accessing premium content.

        - After a user updates their nickname or avatar on their profile page,
        the cached information may cause delays in reflecting the changes.
      tags:
        - Cache-related endpoints
      operationId: clear-cached-role
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
        - name: userId
          in: path
          description: The User ID of the member data to clear from the cache.
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: The cached role was successfully cleared
          content:
            application/json:
              schema:
                type: string
                example: No content
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
  /clear-caches/member/ng-words:
    delete:
      summary: Clear cached NG Words
      description: |
        This endpoint allows posers to clear the cached NG words.
      tags:
        - Cache-related endpoints
      operationId: clear-cached-ng-word
      parameters:
        - $ref: '#/components/parameters/X-Social-Api-Key'
        - $ref: '#/components/parameters/X-Social-Timestamp'
        - $ref: '#/components/parameters/X-Social-Signature'
      responses:
        '204':
          description: The cached NG word was successfully cleared
          content:
            application/json:
              schema:
                type: string
                example: No content
        '401':
          $ref: '#/components/responses/401AuthenticationFailedResponse'
components:
  parameters:
    limit:
      name: limit
      in: query
      description: Retrieve data by limit
      schema:
        type: integer
        format: int32
        default: 30
    offset:
      name: offset
      in: query
      description: Retrieve data by offset
      schema:
        type: integer
        format: int32
      example: 0
    X-Social-Api-Key:
      name: X-Social-Api-Key
      in: header
      description: |
        An unique string provided by Tranvelocity when you create an account. You
        must include this API key in the specified HTTP request header for every
        API request to authenticate your requests.
      required: true
      schema:
        type: string
        example: FSFSDFSDFDSpHYv7kMeb0yVkn2343242L091nI5GLkKPfAt234324bmNEaR
    X-Social-Timestamp:
      name: X-Social-Timestamp
      in: header
      description: |
        An Unix epoch value representing the current time. You must include this
        timestamp in the specified HTTP request header for every API request to
        prevent replay attacks and ensure request freshness.
      required: true
      schema:
        type: integer
        example: 1595907741
    X-Social-Signature:
      name: X-Social-Signature
      in: header
      description: >
        A signature that is HMAC-encoded with SHA-512 digest. You must include
        this

        signature in the specified HTTP request header for every API request to

        ensure data integrity and authenticity.
      required: true
      schema:
        type: string
        example: 5d714ce2385d1cf96260806a50f3f7e68b928cc8
    X-Social-User-SSID:
      name: X-Social-User-SSID
      in: header
      description: |
        The session ID for User.
      required: true
      schema:
        type: string
        example: MBhdHsd4ckmKNNDaScHCJjuPY5pgGFQOhMSSqPis
    X-Social-Auth-Id:
      name: X-Social-Auth-Id
      in: header
      description: |
        The ID used for authentication.
      required: true
      schema:
        type: string
        example: ebbae0f297e50fa92f2eaaa340a1f9125cad6e2d
    is_published:
      name: is_published
      in: query
      description: Indicates whether the post is published
      schema:
        type: boolean
      example: true
    poster_id:
      name: poster_id
      in: query
      description: The ID of the user who posted the content
      schema:
        type: string
      example: 01hnw7pynwbmqe5rghta5s1ed6
    type:
      name: type
      in: query
      description: The type of post
      schema:
        type: string
        enum:
          - free
          - premium
      example: free
    published_start_at_from:
      name: published_start_at_from
      in: query
      description: The start date and time of the post's publication (from)
      schema:
        type: string
        format: date-time
      example: '2024-01-01 00:00:00'
    published_start_at_until:
      name: published_start_at_until
      in: query
      description: The start date and time of the post's publication (until)
      schema:
        type: string
        format: date-time
      example: '2024-01-01 00:00:00'
    published_end_at_from:
      name: published_end_at_from
      in: query
      description: The end date and time of the post's publication (from)
      schema:
        type: string
        format: date-time
      example: '2024-01-01 00:00:00'
    published_end_at_until:
      name: published_end_at_until
      in: query
      description: The end date and time of the post's publication (until)
      schema:
        type: string
        format: date-time
      example: '2024-01-01 00:00:00'
    content:
      name: content
      in: query
      description: The content of the post
      schema:
        type: string
      example: The post content
  schemas:
    LikePostResource:
      type: object
      properties:
        data:
          type: object
          properties:
            post_id:
              type: string
              description: The ID of the post that was liked.
              example: 01hnw7nqm19g9302c7wq391nvm
            user_id:
              type: integer
              description: The ID of the user who liked the post.
              example: 123456789
            action:
              type: string
              description: 'The action performed, which is "liked".'
              example: liked
            total_likes:
              type: integer
              description: The total number of likes the post has received.
              example: 1
      required:
        - data
        - success
        - code
    UnLikePostResource:
      type: object
      x-stoplight:
        id: 4cg38w8stopad
      properties:
        data:
          type: object
          properties:
            post_id:
              type: string
              description: The ID of the post that was unliked.
              example: 01hnw7nqm19g9302c7wq391nvm
            user_id:
              type: integer
              description: The ID of the user who unliked the post.
              example: 123456789
            action:
              type: string
              description: 'The action performed, which is "unliked".'
              example: unliked
            total_likes:
              type: integer
              description: The total number of likes the post has received.
              example: 1
      required:
        - data
        - success
        - code
    LikeResource:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the like.
          example: 01hnw7nqm19g9302c7wq391nvb
        user_id:
          type: integer
          description: The User ID of the like.
          example: 123456789
        post_id:
          type: string
          description: The ID of the post associated with the like.
          example: 01hnw7nqm19g9302c7wq391nvm
        created_at:
          type: string
          format: date-time
          description: The timestamp when the like was created.
          example: '2024-02-07T16:43:46'
    UpdateCommentRequest:
      type: object
      properties:
        comment:
          type: string
          nullable: true
      example:
        comment: Your updated comment goes here
    CommentResource:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: string
              description: The ID of the comment
            user_id:
              type: integer
              description: The User ID of the comment
            nickname:
              type: string
              description: The nickname of the commenter
            avatar:
              type: string
              format: uri
              description: The avatar URL of the commenter
            comment:
              type: string
              description: The content of the comment
            is_hidden:
              type: boolean
              description: Indicates whether the comment is hidden
            updated_at:
              type: string
              format: date-time
              description: The timestamp when the comment was last updated
            created_at:
              type: string
              format: date-time
              description: The timestamp when the comment was created
            post:
              type: object
              properties:
                id:
                  type: string
                  description: The ID of the post associated with the comment
                admin_uuid:
                  type: string
                  description: The admin UUID of the post
                type:
                  type: string
                  description: The type of the post
                content:
                  type: string
                  description: The content of the post
                is_published:
                  type: boolean
                  description: Indicates whether the post is published
                published_start_at:
                  type: string
                  format: date-time
                  description: The start timestamp for the post publication
                published_end_at:
                  type: string
                  format: date-time
                  description: The end timestamp for the post publication
                updated_at:
                  type: string
                  format: date-time
                  description: The timestamp when the post was last updated
                created_at:
                  type: string
                  format: date-time
                  description: The timestamp when the post was created
        success:
          type: boolean
          description: Indicates if the request was successful
        code:
          type: integer
          description: The HTTP status code of the response
      required:
        - data
        - success
        - code
    Comment:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the comment
        user_id:
          type: integer
          nullable: true
          description: The unique identifier of the comment in User
        post_id:
          type: string
          description: The ID of the post associated with the comment
        comment:
          type: string
          description: The content of the comment
        is_hidden:
          type: boolean
          description: Indicates whether the comment is hidden
        updated_at:
          type: string
          format: date-time
          description: The timestamp when the comment was last updated
        created_at:
          type: string
          format: date-time
          description: The timestamp when the comment was created
    CommentList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        success:
          type: boolean
          description: Indicates whether the request was successful
        code:
          type: integer
          description: The status code of the response
        pagination:
          type: object
          properties:
            offset:
              type: integer
              description: The number of items to skip in the dataset
            limit:
              type: integer
              description: The maximum number of items to return
            total:
              type: integer
              description: The total number of items in the dataset
    ErrorWithValidation:
      type: object
      properties:
        data:
          type: array
          items: {}
          description: An empty array indicating no data is returned
        success:
          type: boolean
        code:
          type: integer
        errors:
          type: object
          properties:
            message:
              type: string
            validation:
              type: array
              items:
                type: object
                properties:
                  attribute:
                    type: string
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                        message:
                          type: string
    MediaList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/MediaItem'
        success:
          type: boolean
        code:
          type: integer
        pagination:
          $ref: '#/components/schemas/Pagination'
    MediaItem:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the media item
        post_id:
          type: string
          nullable: true
          description: The ID of the post associated with the media item
        type:
          type: string
          description: The type of the media item
        path:
          type: string
          description: The path to the media file
        updated_at:
          type: string
          format: date-time
          description: The date and time when the media item was last updated
        created_at:
          type: string
          format: date-time
          description: The date and time when the media item was created
    Pagination:
      type: object
      properties:
        offset:
          type: integer
          description: The offset of the current page in pagination
          example: 0
        limit:
          type: integer
          description: The maximum number of items per page
          example: 30
        total:
          type: integer
          description: The total number of items available
          example: 1
    SinglePostItemResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: string
              description: The unique identifier of the post
              example: 01hqt819gw8q83hfedkpbq5cp0
            admin_uuid:
              type: string
              description: The UUID of the admin who created the post
              example: 6ds37e6-032d-32ds-bb49-3b44ffc0ea122
            type:
              type: string
              description: The type of post
              example: premium
            content:
              type: string
              description: The content of the post
              example: Test content here
            is_published:
              type: boolean
              description: Indicates whether the post is published
              example: true
            published_start_at:
              type: string
              format: date-time
              description: The start date and time of the post's publication
              example: '2024-09-01 00:00:00'
            published_end_at:
              type: string
              format: date-time
              description: The end date and time of the post's publication
              example: '2025-12-01 18:00:00'
            updated_at:
              type: string
              format: date-time
              description: The date and time when the post was last updated
              example: '2024-02-29 19:54:48'
            created_at:
              type: string
              format: date-time
              description: The date and time when the post was created
              example: '2024-02-29 19:54:48'
            total_medias:
              type: integer
              description: The total number of media files attached to the post
              example: 4
            medias:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: object
                    format: uri
                    description: URL of the image media files
                  example:
                    - src: >-
                        https://dev-social.api.com/medias/images/7e30d400-7997-426e-b4f6-5b0e3e5082fc_1707123584.jpg
                      id: 01hr6d05ftx6hptm2pw2mbrnb2
                    - src: >-
                        https://dev-social.api.com/medias/images/7e30d400-7997-426e-b4f6-5b0e3e5082fc_1707123642.jpg
                      id: 01hr6d05ftx6hptm2pw2mbrg432
                videos:
                  type: array
                  items:
                    type: object
                    format: uri
                    description: URL of the video media files
                  example:
                    - thumbnail: >-
                        https://123456789.cloudfront.net/social/local/medias/thumbnails/97f99721-1615-4572-a612-017a3f193b11.png
                      src: >-
                        https://123456789.cloudfront.net/social/local/video/3d6d2109-a6c9-4b27-a018-c43e389c0567.mp4
                      id: f9c0db9e6125cb1829b1
                    - thumbnail: >-
                        https://123456789.cloudfront.net/social/local/medias/thumbnails/97f99721-1615-4572-a612-017a3f193b11.png
                      src: >-
                        https://123456789.cloudfront.net/social/local/video/c63a6455-54e0-48af-9191-7d454fab39ae.mov
                      id: f9c0db9e6125cb1829b1
            comments:
              type: array
              description: List of comments associated with the post
              items:
                $ref: '#/components/schemas/Comment'
            poster:
              $ref: '#/components/schemas/Poster'
        success:
          type: boolean
          description: Indicates whether the request was successful
          example: true
        code:
          type: integer
          description: The status code of the response
          example: 200
      example:
        data:
          id: 01hqt819gw8q83hfedkpbq5cp0
          admin_uuid: 6ds37e6-032d-32ds-bb49-3b44ffc0ea122
          type: premium
          content: Test content here
          is_published: true
          published_start_at: '2024-09-01 00:00:00'
          published_end_at: '2025-12-01 18:00:00'
          updated_at: '2024-02-29 19:54:48'
          created_at: '2024-02-29 19:54:48'
          total_medias: 4
          medias:
            images:
              - src: >-
                  https://dev-social.api.com/medias/images/7e30d400-7997-426e-b4f6-5b0e3e5082fc_1707123584.jpg
                id: 01hr6d05ftx6hptm2pw2mbrnb2
              - src: >-
                  https://dev-social.api.com/medias/images/7e30d400-7997-426e-b4f6-5b0e3e5082fc_1707123642.jpg
                id: 01hr6d05ftx6hptm2pw2mbrg432
            videos:
              - thumbnail: >-
                  https://123456789.cloudfront.net/social/local/medias/thumbnails/97f99721-1615-4572-a612-017a3f193b11.png
                src: >-
                  https://123456789.cloudfront.net/social/local/video/3d6d2109-a6c9-4b27-a018-c43e389c0567.mp4
                id: f9c0db9e6125cb1829b1
              - thumbnail: >-
                  https://123456789.cloudfront.net/social/local/medias/thumbnails/97f99721-1615-4572-a612-017a3f193b11.png
                src: >-
                  https://123456789.cloudfront.net/social/local/video/c63a6455-54e0-48af-9191-7d454fab39ae.mov
                id: f9c0db9e6125cb1829b1
          comments: []
          poster:
            id: 3123qszfkc6fpfya5m7n42zfs22
            admin_uuid: 6ds37e6-032d-32ds-bb49-3b44ffc0ea122
            user_id: 123456789
            nickname: hoctran
            avatar: >-
              https://stage.user.com/file/fileconsumer/doo/selector/downloader/phase/download_file/type/images/file_id/phpv2w4cF
            description: hoc tran .
            updated_at: '2024-02-29 17:25:20'
            created_at: '2024-02-29 17:25:20'
        success: true
        code: 200
    Poster:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the poster
          example: 01hnwc01kfm6bg9syg73h4q9dc
        admin_uuid:
          type: string
          description: The UUID of the admin who created the poster
          example: 1295de24-404b-402f-8ec5-1a5f3231a244
        user_id:
          type: integer
          description: The User ID associated with the poster
          example: 123456789
        nickname:
          type: string
          description: The nickname of the poster (retrieved from CRM API)
          example: HocTran（本人）
        avatar:
          type: string
          description: The avatar URL of the poster (retrieved from CRM API)
          example: 'https://123456789.cloudfront.net/crm/staging/avatar.png'
        description:
          type: string
          description: The description of the poster
          example: Test description here
        updated_at:
          type: string
          format: date-time
          description: The date and time when the poster was last updated
          example: '2024-02-05 19:11:06'
        created_at:
          type: string
          format: date-time
          description: The date and time when the poster was created
          example: '2024-02-05 19:11:06'
    PostSocial:
      type: object
      x-stoplight:
        id: xqavau5nv7fx4
      properties:
        id:
          type: string
          description: The unique identifier of the post
          example: 01hqszjf5chtw8gfdakrssf0ve
        admin_uuid:
          type: string
          description: The UUID of the admin who created the post
          example: 6ds37e6-032d-32ds-bb49-3b44ffc0ea122
        type:
          type: string
          description: The type of post
          example: premium
        content:
          type: string
          description: The content of the post
          example: Test content here
        is_published:
          type: boolean
          description: Indicates whether the post is published
          example: true
        published_start_at:
          type: string
          format: date-time
          description: The start date and time of the post's publication
          example: '2024-09-01 00:00:00'
        published_end_at:
          type: string
          format: date-time
          description: The end date and time of the post's publication
          example: '2025-12-01 18:00:00'
        updated_at:
          type: string
          format: date-time
          description: The date and time when the post was last updated
          example: '2024-02-29 17:26:53'
        created_at:
          type: string
          format: date-time
          description: The date and time when the post was created
          example: '2024-02-29 17:26:53'
        poster:
          type: object
          description: Describes the poster data.
          properties:
            id:
              type: string
              description: The ID of the poster
            admin_uuid:
              type: string
              description: The Admin UUID of the poster
            user_id:
              type: integer
              description: The user ID of the poster
            nickname:
              type: string
              description: The nickname of the poster
            avatar:
              type: string
              description: The avatar of the poster
        medias:
          type: object
          properties:
            images:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    description: The ID of the image source
                  src:
                    type: string
                    description: The URL of the image source
            videos:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    description: The ID of the video source
                  thumbnail:
                    type: string
                    description: The URL of the video thumbnail
                  src:
                    type: string
                    description: The URL of the video source
        total_comments:
          type: integer
          description: The total number of comments on the post
          example: 6
        total_medias:
          type: integer
          description: The total number of media files associated with the post
          example: 20
        total_likes:
          type: integer
          description: The total number of likes on the post
          example: 6
        is_liked:
          type: boolean
          description: Indicates whether the current user has liked the post
          example: false
      required:
        - id
        - admin_uuid
        - type
        - content
        - is_published
        - published_start_at
        - published_end_at
        - poster
        - updated_at
        - created_at
        - medias
        - total_comments
        - total_medias
        - total_likes
        - is_liked
    Post:
      type: object
      required:
        - id
        - admin_uuid
        - type
        - content
        - is_published
        - published_start_at
        - published_end_at
        - updated_at
        - created_at
        - medias
        - total_comments
        - total_medias
        - total_likes
        - is_liked
        - poster
      properties:
        id:
          type: string
          description: The unique identifier of the post
          example: 01hnwc01kfm6bg9syg73h4q9dc
        admin_uuid:
          type: string
          description: The UUID of the admin who created the post
          example: 1295de24-404b-402f-8ec5-1a5f3231a244
        type:
          type: string
          description: The type of post
          example: premium
        content:
          type: string
          description: The content of the post
          example: Test content here
        is_published:
          type: boolean
          description: Indicates whether the post is published
          example: false
        published_start_at:
          type: string
          format: date-time
          description: The start date and time of the post's publication
          example: '2024-09-01 00:00:00'
        published_end_at:
          type: string
          format: date-time
          description: The end date and time of the post's publication
          example: '2025-12-01 18:00:00'
        updated_at:
          type: string
          format: date-time
          description: The date and time when the post was last updated
          example: '2024-02-05 19:11:06'
        created_at:
          type: string
          format: date-time
          description: The date and time when the post was created
          example: '2024-02-05 19:11:06'
        poster:
          type: object
          description: >-
            Describes the poster data. If the poster has been deleted, NULL will
            be returned.
          properties:
            id:
              type: string
              description: The ID of the poster
              example: 3123qszfkc6fpfya5m7n42zfs22
            admin_uuid:
              type: string
              description: The Admin UUID of the poster
              example: 6ds37e6-032d-32ds-bb49-3b44ffc0ea122
            user_id:
              type: integer
              description: The user ID of the poster
              example: 123456789
            nickname:
              type: string
              description: The nickname of the poster
              example: hoctran
            avatar:
              type: string
              description: The avatar of the poster
              example: >-
                https://123456789.cloudfront.net/crm/avatar/97f99721-1615-4572-a612-017a3f193b11.png
    Error:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the request was successful
        code:
          type: integer
          description: The status code of the error
        errors:
          type: object
          properties:
            message:
              type: string
              description: A descriptive message explaining the error
            code:
              type: integer
              description: A unique error code identifying the specific error
  responses:
    401AuthenticationFailedResponse:
      description: Unauthorized. HMAC authentication failed or invalid session ID.
      content:
        application/json:
          examples:
            HMACAuthenticationFailed:
              summary: HMAC authentication failed.
              value:
                success: false
                code: 401
                errors:
                  message: >-
                    HMAC authentication was failed. Please make sure your
                    credentials again.
                  code: 401001
            InvalidSessionID:
              summary: Invalid session ID.
              value:
                success: false
                code: 401
                errors:
                  message: Invalid session ID.
                  code: 401004
    403ForbiddenResponse:
      description: Forbidden - Access Denied
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: Indicates whether the request was successful
                example: false
              code:
                type: integer
                description: The HTTP status code of the response
                example: 403
              errors:
                type: object
                properties:
                  message:
                    type: string
                    description: A message explaining the reason for the forbidden access
                    example: 指定されたデータをいじる権限がありません。
                  code:
                    type: integer
                    description: A code indicating the specific error
                    example: 403001
    404PostResourceNotFoundResponse:
      description: Resource Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: Indicates whether the request was successful
                example: false
              code:
                type: integer
                description: The HTTP status code of the response
                example: 404
              errors:
                type: object
                properties:
                  message:
                    type: string
                    description: A message indicating that the post was not found
                    example: ID 01hnw7nqm19g9302c7wq391nvm1に一致する投稿は見つかりませんでした。
                  code:
                    type: integer
                    description: A code indicating the specific error
                    example: 404001
    404CommentAndPostResourceNotFoundResponse:
      description: Comment or post not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            example-1:
              value:
                success: false
                code: 404
                errors:
                  message: ID 01hnw7nqm19g9302c7wq391nvm11に一致する投稿は見つかりませんでした。
                  code: 404001
            example-2:
              value:
                success: false
                code: 404
                errors:
                  message: ID 01hnw7nqm19g9302c7wq391nvm11に一致するコメントは見つかりませんでした。
                  code: 404001
    404PosterResourceNotFoundResponse:
      description: The specified poster ID was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: Indicates whether the request was successful
              code:
                type: integer
                description: The HTTP status code of the response
              errors:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating the poster ID was not found
                  code:
                    type: integer
                    description: Error code indicating the specific error
          example:
            success: false
            code: 404
            errors:
              message: ID 01HNKSV9KTR72PWX1NTR0T1K5K1に一致する投稿者は見つかりませんでした。
              code: 404001
    404PosterNotFoundResponse:
      description: The requested resource was not found.
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              code:
                type: integer
                example: 404
              errors:
                type: object
                properties:
                  message:
                    type: string
                    example: ID 01hpr9vxjhsygaecwkp30paayw1に一致する投稿者は見つかりませんでした。
                  code:
                    type: integer
                    example: 404001
    500FatalResponse:
      description: >-
        Internal Server Error - A fatal error has occurred while processing the
        request.
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: Indicates whether the request was successful.
                example: false
              code:
                type: integer
                description: The HTTP status code of the response.
                example: 500
              errors:
                type: object
                properties:
                  message:
                    type: string
                    description: A message describing the fatal error that occurred.
                    example: >-
                      A fatal error has occurred while running the process,
                      please try again.
                  code:
                    type: integer
                    description: >-
                      A specific error code associated with the internal server
                      error.
                    example: 500001
    201CreatedPostResponse:
      description: Response for creating a new post
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                description: Details of the newly created post
                properties:
                  id:
                    type: string
                    description: Unique identifier of the post
                    example: 01hqszjf5chtw8gfdakrssf0ve
                  admin_uuid:
                    type: string
                    description: UUID of the admin who created the post
                    example: 6ds37e6-032d-32ds-bb49-3b44ffc0ea122
                  type:
                    type: string
                    description: Type of the post
                    example: premium
                  content:
                    type: string
                    description: Content of the post
                    example: Test content here
                  is_published:
                    type: boolean
                    description: Indicates whether the post is published
                    example: true
                  published_start_at:
                    type: string
                    format: date-time
                    description: Start date and time of the post's publication
                    example: '2024-09-01 00:00:00'
                  published_end_at:
                    type: string
                    format: date-time
                    description: End date and time of the post's publication
                    example: '2025-12-01 18:00:00'
                  updated_at:
                    type: string
                    format: date-time
                    description: Date and time when the post was last updated
                    example: '2024-02-29 17:26:53'
                  created_at:
                    type: string
                    format: date-time
                    description: Date and time when the post was created
                    example: '2024-02-29 17:26:53'
                  total_medias:
                    type: integer
                    description: Total number of media files attached to the post
                    example: 0
                  total_comments:
                    type: integer
                    description: Total number of comments on the post
                    example: 0
                  total_likes:
                    type: integer
                    description: Total number of likes on the post
                    example: 0
                  medias:
                    type: object
                    description: Media files attached to the post
                    properties:
                      images:
                        type: array
                        description: List of image URLs
                        items:
                          type: array
                          format: uri
                          example:
                            - >-
                              https://dev-social.api.com/medias/images/7e30d400-7997-426e-b4f6-5b0e3e5082fc_1707123584.jpg
                      videos:
                        type: array
                        description: List of video URLs
                        items:
                          type: array
                          format: uri
                          example:
                            - >-
                              https://dev-social.api.com/medias/videos/7e30d400-7997-426e-b4f6-5b0e3e5082fc_1707123584.mp4
                  comments:
                    type: array
                    description: List of comments on the post
                    items:
                      type: object
                      properties: {}
                  poster:
                    type: object
                    description: Details of the user who posted the content
                    properties:
                      id:
                        type: string
                        description: ID of the user who posted the content
                        example: 3123qszfkc6fpfya5m7n42zfs22
                      admin_uuid:
                        type: string
                        description: UUID of the admin who created the user profile
                        example: 6ds37e6-032d-32ds-bb49-3b44ffc0ea122
                      user_id:
                        type: integer
                        description: ID of the user in the User system
                        example: 123456789
                      nickname:
                        type: string
                        description: Nickname of the user
                        example: hoctran
                      avatar:
                        type: string
                        description: URL of the user's avatar
                        format: uri
                        example: >-
                          https://stage.user.com/file/fileconsumer/doo/selector/downloader/phase/download_file/type/images/file_id/phpv2w4cF
                      description:
                        type: string
                        description: Description of the user
                      updated_at:
                        type: string
                        format: date-time
                        description: Date and time when the user profile was last updated
                        example: '2024-02-29 17:25:20'
                      created_at:
                        type: string
                        format: date-time
                        description: Date and time when the user profile was created
                        example: '2024-02-29 17:25:20'
              success:
                type: boolean
                description: Indicates whether the request was successful
                example: true
              code:
                type: integer
                description: Status code of the response
                example: 201
    201CreatedCommentResponse:
      description: Created newly comment response
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                description: Details of the created comment
                properties:
                  id:
                    type: string
                    description: The ID of the comment
                    example: 01hqt8mw2b4c4b2wwympce5fk3
                  user_id:
                    type: integer
                    description: The User ID of the comment
                    example: 123456789
                  nickname:
                    type: string
                    description: The nickname of the commenter
                    example: hoctran
                  avatar:
                    type: string
                    description: The URL of the commenter's avatar
                    example: >-
                      https://stage.user.com/file/fileconsumer/doo/selector/downloader/phase/download_file/type/images/file_id/phpv2w4cF
                  comment:
                    type: string
                    description: The content of the comment
                    example: Your comment goes here
                  is_hidden:
                    type: boolean
                    description: Indicates whether the comment is hidden
                    example: false
                  updated_at:
                    type: string
                    format: date-time
                    description: The timestamp when the comment was last updated
                    example: '2024-02-29 20:05:29'
                  created_at:
                    type: string
                    format: date-time
                    description: The timestamp when the comment was created
                    example: '2024-02-29 20:05:29'
                  post:
                    type: object
                    description: Details of the associated post
                    properties:
                      id:
                        type: string
                        description: The ID of the post associated with the comment
                        example: 01hqt819gw8q83hfedkpbq5cp0
                      admin_uuid:
                        type: string
                        description: The admin UUID of the post
                        example: 6ds37e6-032d-32ds-bb49-3b44ffc0ea122
                      type:
                        type: string
                        description: The type of the post
                        example: premium
                      content:
                        type: string
                        description: The content of the post
                        example: Test content
                      is_published:
                        type: boolean
                        description: Indicates whether the post is published
                        example: true
                      published_start_at:
                        type: string
                        format: date-time
                        description: The start timestamp for the post publication
                        example: '2023-11-30 08:00:00'
                      published_end_at:
                        type: string
                        format: date-time
                        description: The end timestamp for the post publication
                        example: '2024-12-01 18:00:00'
                      updated_at:
                        type: string
                        format: date-time
                        description: The timestamp when the post was last updated
                        example: '2024-02-29 20:02:21'
                      created_at:
                        type: string
                        format: date-time
                        description: The timestamp when the post was created
                        example: '2024-02-29 19:54:48'
                      poster:
                        type: object
                        description: Details of the user who posted the comment
                        properties:
                          id:
                            type: string
                            description: The ID of the user who posted the comment
                            example: 3123qszfkc6fpfya5m7n42zfs22
                          admin_uuid:
                            type: string
                            description: The admin UUID of the user
                            example: 6ds37e6-032d-32ds-bb49-3b44ffc0ea122
                          user_id:
                            type: integer
                            description: The User ID of the user
                            example: 123456789
                          description:
                            type: string
                            description: The description of the user
                          updated_at:
                            type: string
                            format: date-time
                            description: >-
                              The timestamp when the user profile was last
                              updated
                            example: '2024-02-29 17:25:20'
                          created_at:
                            type: string
                            format: date-time
                            description: The timestamp when the user profile was created
                            example: '2024-02-29 17:25:20'
                required:
                  - id
                  - user_id
                  - nickname
                  - avatar
                  - comment
                  - is_hidden
                  - updated_at
                  - created_at
                  - post
              success:
                type: boolean
                description: Indicates whether the request was successful
                example: true
              code:
                type: integer
                description: The status code of the response
                example: 201
  requestBodies:
    CreatePosterRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              user_id:
                type: integer
                description: The user ID associated with the poster.
              description:
                type: string
                description: A description of the poster.
            required:
              - user_id
          example:
            user_id: 123456789
            description: This is Mr. Hoc Tran
    PosterCreatePostRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              is_published:
                type: boolean
                description: Indicates whether the post is published
              type:
                type: string
                description: The type of post
                enum:
                  - free
                  - premium
              published_start_at:
                type: string
                format: date-time
                description: The start date and time of the post's publication
              published_end_at:
                type: string
                format: date-time
                description: The end date and time of the post's publication
              content:
                type: string
                description: The content of the post
              media_ids:
                type: array
                description: An array of media IDs associated with the post
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: The ID of the media item
            required:
              - type
          example:
            is_published: false
            type: premium
            published_start_at: '2024-09-01 00:00:00'
            published_end_at: '2025-12-01 18:00:00'
            content: Test content here
            media_ids:
              - id: 01hnw7xbw6md3tje5pdfgy92yr
              - id: 01hnw850hwr999fdtd39tfasac
    AdminCreatePostRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              is_published:
                type: boolean
                description: Indicates whether the post is published
              type:
                type: string
                description: The type of post
                enum:
                  - free
                  - premium
              poster_id:
                type: string
                description: The poster ID of post
              published_start_at:
                type: string
                format: date-time
                description: The start date and time of the post's publication
              published_end_at:
                type: string
                format: date-time
                description: The end date and time of the post's publication
              content:
                type: string
                description: The content of the post
              media_ids:
                type: array
                description: An array of media IDs associated with the post
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: The ID of the media item
            required:
              - type
              - poster_id
          example:
            is_published: false
            type: premium
            poster_id: 01hnwc01kfm6bg9syg73h4q9dc
            published_start_at: '2024-09-01 00:00:00'
            published_end_at: '2025-12-01 18:00:00'
            content: Test content here
            media_ids:
              - id: 01hnw7xbw6md3tje5pdfgy92yr
              - id: 01hnw850hwr999fdtd39tfasac
    CreateCommentRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              comment:
                type: string
                description: The content of the comment
                example: Your comment goes here
            required:
              - comment
